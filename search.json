[{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"concepts","dir":"Articles","previous_headings":"","what":"Concepts","title":"Data formats","text":"13C data can imported generic formats Excel files, several vendor-specific formats, e.g. BreathID Wagner/IRIS. collection sample files without errors available directory /opt/R/4.2.1/lib/R/library/breathtestcore/extdata; function btcore_file() retrieves names long path available data sets. know format, can read data using special functions, e.g. read_breathid() read_breathid_xml(). know format, want read several different file formats , use function read_any_breathtest() tries guess format. Passing cleanup_data() returns data frame/tibble adds grouping variable. plot data without fitting, use null_fit().  add new formats, override breathtest_read_function() add new function returns structure given breathtest_data(). Always pass data function cleanup_data() obtain data frame can fed one fitting functions nls_fit(), nlme_fit(), null_fit() breathteststan::stan_fit().","code":"library(breathtestcore) head(btcore_file()) [1] \"350_20023_0_GERWithNan.txt\"       \"350_20043_0_GER.txt\"              [3] \"350_20043_0_GERBadHeader.txt\"     \"350_20043_0_GERDuplicateTime.txt\" [5] \"350_20043_0_GERNoData.txt\"        \"350_20043_0_GERNoT50.txt\" btcore_file(\"Standard.TXT\") [1] \"/home/runner/work/_temp/Library/breathtestcore/extdata/Standard.TXT\" files = c(   btcore_file(\"IrisCSV.TXT\"), # Wagner/IRIS format   btcore_file(\"350_20043_0_GER.txt\") # BreathID  )  bt = read_any_breathtest(files)  # Returns a list of elements of class breathtest_data  str(bt, 1) List of 2  $ :List of 23   ..- attr(*, \"class\")= chr \"breathtest_data\"  $ :List of 23   ..- attr(*, \"class\")= chr \"breathtest_data\"  - attr(*, \"class\")= chr \"breathtest_data_list\" bt_df = cleanup_data(bt)  str(bt_df) tibble [101 × 4] (S3: tbl_df/tbl/data.frame)  $ patient_id: chr [1:101] \"123456\" \"123456\" \"123456\" \"123456\" ...  $ group     : chr [1:101] \"A\" \"A\" \"A\" \"A\" ...  $ minute    : num [1:101] 0.01 10 20 45 60 75 90 105 120 140 ...  $ pdr       : num [1:101] 0 1.11 2.86 4.87 5.19 ... nf = null_fit(bt_df)  str(nf) List of 1  $ data: tibble [101 × 4] (S3: tbl_df/tbl/data.frame)   ..$ patient_id: chr [1:101] \"123456\" \"123456\" \"123456\" \"123456\" ...   ..$ group     : chr [1:101] \"A\" \"A\" \"A\" \"A\" ...   ..$ minute    : num [1:101] 0.01 10 20 45 60 75 90 105 120 140 ...   ..$ pdr       : num [1:101] 0 1.11 2.86 4.87 5.19 ...  - attr(*, \"class\")= chr [1:2] \"breathtestnullfit\" \"breathtestfit\" plot(nf) # dispatches to plot.breathtestfit"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"automatic-grouping","dir":"Articles","previous_headings":"Concepts","what":"Automatic grouping","title":"Data formats","text":"can add grouping variable, e.g. multiple meal types, compute group differences means. Cross-, randomized mixed designs (patients cross-) supported. must explicitlty state grouping variable single file shown . Without names, possible vectorize, e.g. read_any_breathtest(c(file1, file2)), ‘c()’ operator used vectors disambiguates names appending numbers.","code":"files1 = c(   group_a = btcore_file(\"IrisCSV.TXT\"), # Use only single file with grouping   group_a = btcore_file(\"Standard.TXT\"),   group_b = btcore_file(\"350_20043_0_GER.txt\")  )  # Alternative syntax using magrittr operator suppressPackageStartupMessages(library(dplyr)) read_any_breathtest(files1) %>%    cleanup_data() %>%    null_fit() %>%    plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"simulated-data","dir":"Articles","previous_headings":"Concepts","what":"Simulated data","title":"Data formats","text":"Function simulate_breathtest_data() generates sample data can use test different algorithms. Curves outliers can generated setting student_t_df values 2 (strong outliers) 10 (almost gaussian). Example cross-design missing data, outliers missing record red curve.","code":"set.seed(212) data = list(meal_a = simulate_breathtest_data(n_records = 3, noise = 2,                           student_t_df = 3, missing = 0.3),              meal_b = simulate_breathtest_data(n_records = 4)) data %>%    cleanup_data() %>%    nlme_fit() %>%    plot() data$meal_a$record patient_id  m       k beta t50_maes_ghoos 1     rec_01 38 0.01310 2.41            106 2     rec_02 47 0.00918 1.69            119 3     rec_03 16 0.01039 2.25            128"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"built-in-data-sets","dir":"Articles","previous_headings":"Concepts","what":"Built-in data sets","title":"Data formats","text":"Three data sets included R format can loaded shown . data provided University Hospital Zürich; details given documentation. breathtestcore::usz_13c large data set used establish reference ranges healthy volunteers patients breathtestcore::usz_13c_a Exotic data, challenge fitting algorthms breathtestcore::usz_13c_d gastric emptying half time MRI attribute, can used compare recorded data gold standards; see example documentation.","code":"data(\"usz_13c\") cat(\"usz_13c has data from\", length(unique(usz_13c$patient_id)), \"patients with\" ,      length(unique(usz_13c$group)), \"different meals\") usz_13c has data from 163 patients with 4 different meals"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"generic-formats","dir":"Articles","previous_headings":"","what":"Generic formats","title":"Data formats","text":"easiest way supply generic formats Excel files. data formats described following shown examples workbook /opt/R/4.2.1/lib/R/library/breathtestcore/extdata/ExcelSamples.xlsx. tab-separated data set can directly inserted editor breathtestshiny web app using copy/paste.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"how-to-use-the-excel-data-formats","dir":"Articles","previous_headings":"Generic formats","what":"How to use the Excel data formats","title":"Data formats","text":"Use function read_breathtest_excel(); way select worksheet different first workbook passing parameter sheet. methods read first worksheet. Use function read_any_breathtest(). always reads first worksheet, can combine results several files, even different formats breathtestshiny GUI, can drag file formats mentioned green field; select ‘Browse file’; paste Excel data tab-separated data edit field.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"two-column-format","dir":"Articles","previous_headings":"Generic formats > How to use the Excel data formats","what":"Two-column format","title":"Data formats","text":"data one record, can supply data two-column format given sheet 2col workboot ExcelSamples.xlsx. column headers must minute, pdr. breathtestshiny GUI, can upload file, simply paste editor. easiest method get fit single patient. list returned, element tibble two columns. create standardized format fitting plotting, pass cleanup_data adds dummy columns patient_id (pat_a), group () Compute fit plot","code":"(bt = read_breathtest_excel(btcore_file(\"ExcelSamples.xlsx\"), \"2col\")) [[1]]  [38;5;246m# A tibble: 22 × 2 [39m   minute   pdr     [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m   0.42 0.547  [38;5;250m2 [39m  11.9  1.64   [38;5;250m3 [39m  23.4  3.89   [38;5;250m4 [39m  34.9  6.13   [38;5;246m# … with 18 more rows [39m (cbt = cleanup_data(bt))  [38;5;246m# A tibble: 22 × 4 [39m   patient_id group minute   pdr    [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m pat_a      A       0.42 0.547  [38;5;250m2 [39m pat_a      A      11.9  1.64   [38;5;250m3 [39m pat_a      A      23.4  3.89   [38;5;250m4 [39m pat_a      A      34.9  6.13   [38;5;246m# … with 18 more rows [39m cbt %>% nls_fit() %>% plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"three-column-format","dir":"Articles","previous_headings":"Generic formats > How to use the Excel data formats","what":"Three-column format","title":"Data formats","text":"one patient, must add column patient_id may numeric string. dummy group ‘’ added cleanup_data(), data standardized format now.","code":"(bt = read_breathtest_excel(btcore_file(\"ExcelSamples.xlsx\"), \"3col\")) [[1]]  [38;5;246m# A tibble: 43 × 3 [39m   patient_id minute   pdr    [3m [38;5;246m<chr> [39m [23m        [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m 7951500      0.42 0.547  [38;5;250m2 [39m 7951500     11.9  1.64   [38;5;250m3 [39m 7951500     23.4  3.89   [38;5;250m4 [39m 7951500     34.9  6.13   [38;5;246m# … with 39 more rows [39m (cbt = cleanup_data(bt))  [38;5;246m# A tibble: 43 × 4 [39m   patient_id group minute   pdr    [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<chr> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m 7951500    A       0.42 0.547  [38;5;250m2 [39m 7951500    A      11.9  1.64   [38;5;250m3 [39m 7951500    A      23.4  3.89   [38;5;250m4 [39m 7951500    A      34.9  6.13   [38;5;246m# … with 39 more rows [39m"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"four-column-format","dir":"Articles","previous_headings":"Generic formats > How to use the Excel data formats","what":"Four-column format","title":"Data formats","text":"four-column format column names patient_id, group, minute, pdr standard format. cross-designs, can different groups one patient. sample four-column format. See worksheet 4col_2group.","code":"bt = read_breathtest_excel(btcore_file(\"ExcelSamples.xlsx\"), \"4col_2group\") %>%    cleanup_data() kable(sample_frac(bt, 0.08) %>% arrange(patient_id, group), caption = \"A sample from a four-column format. See worksheet 4col_2group.\") bt %>% nlme_fit() %>% plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"dob-instead-of-pdf","dir":"Articles","previous_headings":"Generic formats > How to use the Excel data formats","what":"DOB instead of PDF","title":"Data formats","text":"DOB data (d), can use dob instead pdr header last column. DOB data automatically converted PDR function dob_to_pdr(). Since body weight height given, defaults 75kg 180 cm assumed. half-emptying time lags depend assumptions. parameter m fit normalized area amplitude, affected, know case m used clinical practice.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"iris-wagner-composite-data","dir":"Articles","previous_headings":"Vendor-specific formats","what":"IRIS-Wagner composite data","title":"Data formats","text":"first lines IrisMulti.TXT Use read_iris() read_any_breathtest() : IRIS/Wagner composite file. data fitted successfully single-curve fit method, therefore data shown.","code":"\"Testergebnis\" \"Nummer\",\"22\" \"Datum\",\"12.06.2009\" \"Testart\" \"Name\",\"Magenentleerung fest\" \"Abkürzung\",\"GE FEST\" \"Substrat\",\"Natriumoktanoat\" read_iris(btcore_file(\"IrisMulti.TXT\")) %>%    cleanup_data() %>%    null_fit() %>%    plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"iriswagner-csv-format","dir":"Articles","previous_headings":"Vendor-specific formats","what":"IRIS/Wagner CSV format","title":"Data formats","text":"Files format start like (lines shortened …) Use read_iris_csv() read_any_breathtest() : IRIS/Wagner CSV file","code":"\"Name\",\"Vorname\",\"Test\",\"Identifikation\",\"Testzeit[min]\",... \"Einstein\",\"Albert\",\"GE FEST\",\"330240\",\"0\",\"0\",\"-26.32\",\"4.501891E-02\", ... \"Einstein\",\"Albert\",\"GE FEST\",\"330240\",\"10\",\"2.02\",\"-24.3\",\"5.617962E-02\",\"2.391013\",.. \"Einstein\",\"Albert\",\"GE read_iris_csv(btcore_file(\"Standard.TXT\")) %>%    cleanup_data() %>%    nls_fit() %>%    plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"breathid-composite-format","dir":"Articles","previous_headings":"Vendor-specific formats","what":"BreathID composite format","title":"Data formats","text":"Files format start like Use read_breathid() read_any_breathtest(): BreathID composite file","code":"Test and Patient parameters                                        Date           -    12/11/12                     End time       -    08:54                    Start time     -    12:49                    Patient # - 0        Patient ID   - Franz read_breathid(btcore_file(\"350_20043_0_GER.txt\")) %>%    cleanup_data() %>%    nls_fit() %>%    plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/data_formats.html","id":"breathid-xml-format","dir":"Articles","previous_headings":"Vendor-specific formats","what":"BreathID XML format","title":"Data formats","text":"recent XML format BreathID can contain data multiple record starts like : Use read_breathid_xml() read_any_breathtest(): BreathID XML format Grouping useful cross-design force within-subject comparisons functions coef_by_group() coef_diff_by_group(); case, default grouping might required. Replace group parameter manually remove groups, delete column group = NULL, fitting functions requires dummy group name. BreathID XML format manual grouping.","code":"<Tests Device=\"1402\">   <Test Number=\"2\">     <ID>TEST123<\/ID>     <DOB>N/A<\/DOB>     <StartTime>19Jul2017 11:56<\/StartTime>     <EndTime>19Jul2017 12:12<\/EndTime>     <LastResultCode>0<\/LastResultCode>     <StoppedByUser>true<\/StoppedByUser>   <\/Test>   <Test Number=\"3\">     <ID>45689<\/ID>     <StartTime>19Jul2017 12:22<\/StartTime>     <EndTime>19Jul2017 12:29<\/EndTime>     <LastResultCode>0<\/LastResultCode> read_breathid_xml(btcore_file(\"NewBreathID_multiple.xml\")) %>%    cleanup_data() %>%    nls_fit() %>%    plot() # Could also use read_any_breathtest() read_breathid_xml(btcore_file(\"NewBreathID_multiple.xml\")) %>%    cleanup_data() %>%    mutate(     group = \"New\"   ) %>%    nls_fit() %>%    plot()"},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"a-heretical-view-on-13c-breath-test-for-gastric-emptying","dir":"Articles","previous_headings":"","what":"A heretical view on 13C breath test for gastric emptying","title":"Methods and concepts","text":"13C breath test data evaluated clinical practice research indirect measure gastric emptying. normative literature underlying concepts given documentation exp_beta(), t50_maes_ghoos() t50_bluck_coward(). , present subjective viewpoint pharmakokinetics breath test time series. look Maes/Ghoos method (Ghoos et al. (1993), Maes et al. (1998)) currently used, alternatives discussed next section.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"current-concepts","dir":"Articles","previous_headings":"A heretical view on 13C breath test for gastric emptying","what":"Current concepts","title":"Methods and concepts","text":"Within standard framework implemented package, data fitted exponential beta function \\[{PDR} = m*{dose}*k*\\beta(1-e^{-k*minute})^{(\\beta - 1)}*e^{-k*minute}\\] Written R code figure shows examples emptying curves. -called lag time Maes/Ghoos method time maximum. Calling “lag” highly confusing definition; technically, lag time first noticeable rise occurs curve, best illustrated blue curves beta = 8, estimated lag 15 minutes. one looks closely, even definition misleading, curves higher beta zero, behave like polynomial curve power beta - 1 origin. real lag best illustrated curve shifted right t_lag pdr values 0 t < t_lag, indicating real physical transport meal stomach small intestine. practice, 13C curves fitted, beta typically range 1.5 2.5; values beta near 1 often lead instabilities protected priors Bayesian breathteststan::stan_fit() implemented package breathteststan. Examples exponential beta functions used fit breath test curves. Bottom-arrow: Maes/Ghoos lag time. Top-arrow: Maes/Ghoos half emptying time. half-emptying defined Maes et al. (1998) time area curve (AUC) half AUC extrapolated infinity. pharmakokinetics terms, time half bioavailable 13C metabolized. time determined gastric emptying pharmacokinetics 13C bound octanoate/acetate. half-emptying time definition Maes/Ghoos time area curve (AUC) half AUC curve extrapolated infinity. AUC extrapolated infinity, denominator definition t50, vulnerable variable. Even accept exponential beta function reasonable model breath test time series, extrapolating individual curves data slightly longer t50 results ambiguous area estimates, often fails converge, even often gives wildly romantic estimates t50. illustrate brittle AUC infinity , look back different function used fit 13C time series. Ghoos et al. (1993) used following Gamma function fit data: \\[pdr = *t^b*e^{-ct}\\] figure shows, function gives perfectly valid fits breath test time series. However, area curve extrapolated infinity infinite, used compute half-emptying time AUC. Gamma function Ghoos et al. (1993) definition points, fitted beta exponential line. function look similar, area gamma function infinite thus used compute t50.","code":"exp_beta = function(minute,dose,m,k,beta) {      m*dose*k*beta*(1-exp(-k*minute))^(beta-1)*exp(-k*minute) }"},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"dieters-soapbox","dir":"Articles","previous_headings":"A heretical view on 13C breath test for gastric emptying","what":"Dieter’s soapbox","title":"Methods and concepts","text":"therefore recommend using one population method, implemented nlme_fit() stan_fit() studies; methods provide “borrowing strength” keep flock lambs safely together protect outliers big bad wolf. write review paper uses single curve fits report study results, rewrite reject . Using function provided package free beer speech, use online version, even install R. vignette gives details prepare data Excel. clinical practice, single measurements want immediate result. can use Bayesian method get regularized estimates; , want fancy, prepare data set previous cases, add new patient’s data mix-, use Mixed-model Bayesian fit. fitting methods available package breathtestshiny online version.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"secondlook","dir":"Articles","previous_headings":"A heretical view on 13C breath test for gastric emptying","what":"A second look","title":"Methods and concepts","text":"half-emptying time determined 13C breath test method correlates extend gastric emptying within-subject measurements, surrogate gastric emptying times measured MRI (secretion) scintigraphy (meal-). data set usz_13c_d package, MRI emptying data available can compared breath test data. type meal strongly biases estimates dependency lipophilic/lipophobic layering; comparing different meal types reliable even within-subject, less -subject. Many attempts made extract information emptying curve, correct overall high values; Bluck-Coward method implemented package one , results even less consistent MRI Maes/Ghoos method. Sanaka et al. (2004) mention deconvolution use approximate correction pharmcological weighting function Wagner-Nelson method. many publication tried ad-hoc scintigraphic correction (Keller et al. (2009), t50_maes_ghoos_scintigraphy()) one based pharmacolokinetics (Bluck Coward (2006), t50_bluck_coward()). know publication used rigorous statistical tests statistical cross-validation validation different meal types show method gives “better” results default Maes/Ghoos method. following, argue nothing gain playing “better” methods fit breath test time series. Independent per-subject information must available separate acetate pharmacokinetics, based concentration gradient diffusion, gastric empyting, physical transport.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"acetate-pharmacology","dir":"Articles","previous_headings":"A heretical view on 13C breath test for gastric emptying > A second look","what":"Acetate pharmacology","title":"Methods and concepts","text":"Assume mix labelled acetate meal, hide acid-resistant coating used PPI tablets. 13C recorded long tablet stomach, quickly release 13C labelled acetate duodenum small intestine, mimicing one-time dose. described standard pharmacokinetics, results PDR response following first-order compartmental model. Forgetting decorative normalization constants, response difference two exponential functions: \\[{foc} =  e^{-k_1 * {minute}} - e^{-k_2 * {minute}}\\] normalization constant includes clearance dose scales curve. correct normalization constants can found standard texts pharmacokinetics (Gabrielsson Weiner (2006)) base R function stats::SSfol() Pinheiro Bates (2000). Left: pharmcological PDR response separated loads released smaller bowel 0, 30 90 minutes. Right: sum response three loads released successively. left panel plot shows three examples 13C fed enteric tables, remaining stomach 0, 30 90 minutes quickly released smaller intestine. Note real lag caused physical transport : tablet smaller bowel, response . different polynomial-like pseudo-lag beta-exponential function. right panel plot shows summary PDR curve three tablets fed together chance released 0, 30 90 minutes. mimics case stomach releasing meal three chunks size composition, well known pharmacokinetics multiple doses drug. real flow stomach pulse-like, like continuous infusion changing flow. assume stomach empties power-exponential function left panel (see gastempt::powexp()), flow wide peak shown right panel . PDR response technically convolution flow pulse response shown red curve (t_lag = 0) plot. Meal volume (left) flow gastric emptying function power exponential function. Slope computed function gastempt::powexp_slope() inverted sign. 400 ml initial value, tempt = 100, beta = 1.8 Half empyting times t50 marked arrows. correct half-emptying time t50 example 82 minutes, determined left panel; t50 determined fitting Maes/Ghoos version right panel 109 minutes. bias fitting PDR curve naively caused convolution mechanical transport gastric emptying, pharmacological drug kinetics. latter nuisance parameter eliminated - parameter interest ?","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"how-to-correct-for-the-pharmacological-bias","dir":"Articles","previous_headings":"A heretical view on 13C breath test for gastric emptying","what":"How to correct for the pharmacological bias?","title":"Methods and concepts","text":"propose revised procedure separate pharmacology transport. Patient first receive 30 mg acetate enteric table together water. DOB data recorded 60 minutes, normal procedure meal 100 mg acetate/octanoate. resulting PDR look follows: Simulated response two-stage breath test procedure. peak within first hour acetate directly released small bowel, second wider peak result convolution transport emptying pharmacokinetics. first narrow peak 1 hour pharmacological response; fitting , kinetic time constants broaden wide peak can determined, can used remove bias transport component visible main peak mathematical deconvolution. Can anyone supply data set pilot?","code":"data.frame(pdr = c(ff_0[0:59]*50, rep(0, 20), cv$pdr)) %>%    mutate(     minute = 0:(n()-1)   ) %>%    filter(minute %% 10 == 0) %>%    mutate(     pdr = pdr + rnorm(n(), 0, 1)   ) %>%    ggplot(aes(x = minute, y = pdr)) +            geom_point() + geom_line(col = \"gray\") +   scale_x_continuous(breaks = seq(0, 360, by = 60))"},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"why-no-wagner-nelson-sanaka","dir":"Articles","previous_headings":"Why do we need population fits?","what":"Why no Wagner-Nelson (Sanaka)?","title":"Methods and concepts","text":"popular alternative curve fitting work Wagner-Nelson (Sanaka et al. (2004)) method uses non-parametric approach initial slope. However, uses assumption terminal slope subjects (k=0.01/min, 0.65/h) strongly affects estimate half-emptying time, little justification use Wagner-Nelson method. functions package breathteststan::stan_fit() sister package, curves can fitted. seen single example fails Bayesian method multiple records analyzed mix-, excuse use Wagner-Nelson method longer. must, can use function ComputeAndSaveWNFit legacy package D13CBreath. function somewhat awkward use written application tightly integrated database, feel free steal code run.","code":""},{"path":"https://dmenne.github.io/breathtestcore/articles/methods_and_concepts.html","id":"citations","dir":"Articles","previous_headings":"Why do we need population fits?","what":"Citations","title":"Methods and concepts","text":"Bluck, Leslie J C., W Andy Coward. 2006. “Measurement Gastric Emptying 13C-Octanoate Breath Test–Rationalization Scintigraphy.” Physiol Meas 27 (3): 279–89. https://doi.org/10.1088/0967-3334/27/3/006. Gabrielsson, Johan, Dan Weiner. 2006. Pharmacokinetic & Pharmacodynamic Data Analysis : Concepts Applications. 4. ed., rev. expanded. Stockholm: Swedish Pharmaceutical Press. Ghoos, Y. F., B. D. Maes, B. J. Geypens, G. Mys, M. . Hiele, P. J. Rutgeerts, G. Vantrappen. 1993. “Measurement Gastric Emptying Rate Solids Means Carbon-Labeled Octanoic Acid Breath Test.” Gastroenterology 104 (6): 1640–7. https://doi.org/10.1016/0016-5085(93)90640-x. Keller, J, V Andresen, J Wolter, P Layer, M Camilleri. 2009. “Influence Clinical Parameters Results 13C-Octanoic Acid Breath Tests: Examination Different Mathematical Models Large Patient Cohort.” Neurogastroenterology Motility : Official Journal European Gastrointestinal Motility Society 21 (10): 1039–1e83. https://doi.org/10.1111/j.1365-2982.2009.01340.x. Maes, B. D., B. J. Geypens, Y. F. Ghoos, M. . Hiele, P. J. Rutgeerts. 1998. “13C-Octanoic Acid Breath Test Gastric Emptying Rate Solids.” Gastroenterology 114 (4): 856–59. https://doi.org/10.1016/s0016-5085(98)70608-0. Pinheiro, Jose C., Douglas M. Bates. 2000. Mixed-Effects Models S S-Plus. Springer. Sanaka, Masaki, Takatsugu Yamamoto, Tarou Ishii, Yasushi Kuyama. 2004. “Wagner-Nelson Method Can Generate Accurate Gastric Emptying Flow Curve Co2 Data Obtained 13C-Labeled Substrate Breath Test.” Digestion 69 (2): 71–78. https://doi.org/10.1159/000077391.","code":""},{"path":"https://dmenne.github.io/breathtestcore/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dieter Menne. Author, maintainer. Menne Biomed Consulting Tuebingen. Copyright holder. Benjamin Misselwitz. Funder. Mark Fox. Funder. Andreas Steingoetter. Data contributor. University Hospital Zurich, Dep. Gastroenterology. Funder, data contributor.","code":""},{"path":"https://dmenne.github.io/breathtestcore/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Menne D (2022). breathtestcore: Core Functions Read Fit 13c Time Series Breath Tests. https://github.com/dmenne/breathtestcore, https://dmenne.github.io/breathtestcore/.","code":"@Manual{,   title = {breathtestcore: Core Functions to Read and Fit 13c Time Series from Breath Tests},   author = {Dieter Menne},   year = {2022},   note = {https://github.com/dmenne/breathtestcore, https://dmenne.github.io/breathtestcore/}, }"},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"breathtestcore-13c-breath-test-to-analyze-gastric-emptying","dir":"","previous_headings":"","what":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"Dieter Menne Menne Biomed Consulting Tübingen, Germany http://www.menne-biomed.de dieter.menne@menne-biomed.de Menne Biomed Consulting Tübingen, Germany https://www.menne-biomed.de dieter.menne@menne-biomed.de Online reference, examples images vignettes. test functions sample data data, try online demo. Issues can reported . reboot R package dmenne/d13cbreath longer maintained.","code":""},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"what-it-does","dir":"","previous_headings":"","what":"What it does","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"Reads several file formats 13C data: IRIS/Wagner (composite CSV), BreathID Excel. Fits Beta-Exponential nonlinear curve fits using nls, gives successful estimates 90% PDR curves. Computes population fits nlme data multiple recordings available, resulting much reliable estimates studies. Computes prior-constrained Bayesian non-linear fit single records (refactored package dmenne/breathteststan) Computes Bayesian non-linear population fit Stan multiple records (refactored package dmenne/breathteststan) Includes three data sets 13C records University Hospital Zürich comparison results nls, nlme Bayesian Stan. See example documentation t50BluckCoward comparison published data.","code":""},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"sponsors-and-supporters","dir":"","previous_headings":"","what":"Sponsors and supporters","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"software developed cooperation Department Gastroenterology University Hospital Zürich Claraspital Basel. Thanks Benjamin Misselwitz, Mark Fox Werner Schwizer.","code":""},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"install recent versions package, use forget use build_vignettes = TRUE. Stable version packages breathtestcore breathteststan can also installed CRAN. easy installation, use Docker image dmenne/breathtestshiny can run web app online. data stored, can download results series tests studies.","code":"devtools::install_github(\"dmenne/breathtestcore\", build_vignettes = TRUE) # In case you want to use the fancy Stan-based methodes devtools::install_github(\"dmenne/breathteststan\") # And here the web app; this is not on CRAN and must be installed from github devtools::install_github(\"dmenne/breathtestshiny\", build_vignettes = TRUE)"},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage example","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"example documentation function nlme_fit. additional examples, see documentation tests folder tests/testthat source package.","code":"library(breathtestcore) d = simulate_breathtest_data(n_records = 3, noise = 0.2, seed = 4711) data = cleanup_data(d$data) fit = nlme_fit(data) plot(fit) # calls plot.breathtestfit"},{"path":"https://dmenne.github.io/breathtestcore/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Core Functions to Read and Fit 13c Time Series from\n    Breath Tests","text":"core fitting functions Stan variants stable versions CRAN. Shiny web app available github; CRAN release planned. Online demo, source code. Reference: Ghoos, Y. F., B. D. Maes, B. J. Geypens, G. Mys, M. . Hiele, P. J. Rutgeerts, G. Vantrappen. 1993. “Measurement Gastric Emptying Rate Solids Means Carbon-Labeled Octanoic Acid Breath Test.” Gastroenterology 104 (6). Department Medicine, University Hospital Gasthuisberg, Belgium.: 1640–7. Maes, B. D., B. J. Geypens, Y. F. Ghoos, M. . Hiele, P. J. Rutgeerts. 1998. “13C-Octanoic Acid Breath Test Gastric Emptying Rate Solids.” Gastroenterology 114 (4): 856–59. Bluck LJC (2009) Recent advances interpretation 13C octanoate breath test gastric emptying. J. Breath Res. 3, https://iopscience.iop.org/1752-7163/3/3/034002/ Bluck, LJC, Jackson S, Vlasakakis G, Mander (2011) Bayesian hierarchical methods interpret 13C-octanoic acid breath test gastric emptying. Digestion 83_96-107.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/AIC.breathtestnlmefit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 AIC method for breathtestnlmefit — AIC.breathtestnlmefit","title":"S3 AIC method for breathtestnlmefit — AIC.breathtestnlmefit","text":"Extract AIC model fitted nlme_fit","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/AIC.breathtestnlmefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 AIC method for breathtestnlmefit — AIC.breathtestnlmefit","text":"","code":"# S3 method for breathtestnlmefit AIC(object, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/AIC.breathtestnlmefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 AIC method for breathtestnlmefit — AIC.breathtestnlmefit","text":"object class breathtestnlmefit ... used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/augment.breathtestfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augmented prediction for breathtest fit — augment.breathtestfit","title":"Augmented prediction for breathtest fit — augment.breathtestfit","text":"Broom method augment compute predicted values   results class breathttestfit  generated   nls_fit nlme_fit.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/augment.breathtestfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augmented prediction for breathtest fit — augment.breathtestfit","text":"","code":"# S3 method for breathtestfit augment(x, by = NULL, minute = NULL, dose = 100, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/augment.breathtestfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augmented prediction for breathtest fit — augment.breathtestfit","text":"x Object class breathttestfit NULL, predictions original data values returned.  positive number, used step  size sequence minutes 0 maximum value minute data set. minute vector passed, overrides settings , predictions calculated requested minute values. dose 13C acetate octanoate dose ... parameters passed methods","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/augment.breathtestfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augmented prediction for breathtest fit — augment.breathtestfit","text":"NULL,  returns one row  original observation pdr, column fitted. new data given,  .e. one parameter minute null,  column fitted added.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/augment.breathtestfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augmented prediction for breathtest fit — augment.breathtestfit","text":"","code":"library(broom) # Generate simulated data data = cleanup_data(simulate_breathtest_data(n_records = 3)$data) # Fit using the curves individually fit = nls_fit(data) # Predict values at t=60 and t=120 augment(fit, minute = c(60, 120)) #> # A tibble: 6 × 4 #> # Rowwise:  #>   patient_id group minute fitted #>   <chr>      <chr>  <dbl>  <dbl> #> 1 rec_01     A         60   22.0 #> 2 rec_01     A        120   13.5 #> 3 rec_02     A         60   20.4 #> 4 rec_02     A        120   11.7 #> 5 rec_03     A         60   13.6 #> 6 rec_03     A        120   12.4"},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data structure with PDR data and descriptors for breath test records — breathtest_data","title":"Data structure with PDR data and descriptors for breath test records — breathtest_data","text":"Generates structure class breathtest_data  required fields optional fields. Optional fields default NA.  structure used internally intermediate reading  external file formats. read_xxx functions return structure,  list structure (e.g. read_breathid_xml),  converter  new format  used   cleanup_data.  support new format , also update  breathtest_read_function returns likely function  read file reading lines .","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data structure with PDR data and descriptors for breath test records — breathtest_data","text":"","code":"breathtest_data(   patient_id,   name = NA,   first_name = NA,   initials = NA,   dob = NA,   birth_year = NA,   gender = NA,   study = NA,   pat_study_id = NA,   file_name,   device = \"generic\",   substrate,   record_date,   start_time = record_date,   end_time = record_date,   test_no,   dose = 100,   height = 180,   weight = 75,   t50 = NA,   gec = NA,   tlag = NA,   data = data )"},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data structure with PDR data and descriptors for breath test records — breathtest_data","text":"patient_id required, string number unique identification name optional first_name optional initials optional, 2 characters, 1 number dob optional date birth (confused \"delta baseline\") birth_year optional gender optional m f study optional name study; can used population fit pat_study_id optional; patient number within study_ need globally unique file_name required; file data read , unique string_ data read , string tested record skipped filename already database, therefore uniqueness important_ record turn database repeated reading, check record file name already , rename file avoid collisions_ device breath_id iris; default \"generic\" substrate contain string \"ace\" \"oct\" \"okt\", case insensitive_ replaced \"acetate\" \"octanoate\". empty, \"ocatanoate\" assumed. record_date required record date_ start_time optional end_time optional test_no required integer; unique test number converted integer factor dose optional, default 100 mg height optional, cm; pdr must calculated, default values used; see dob_to_pdr weight optional, kg t50 optional, present device computes value gec optional, present device computes value tlag optional, present device computes value data data frame least 5 rows columns minute  time one dob pdr.  pdr missing, height, weight  substrate given, computes pdr via function dob_to_pdr.  height weight missing,  defaults 180 cm 75 kg used instead.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data structure with PDR data and descriptors for breath test records — breathtest_data","text":"","code":"# Read a file with known format iris_csv_file = btcore_file(\"IrisCSV.TXT\") iris_csv_data = read_iris_csv(iris_csv_file) # Note that many filds are NA str(iris_csv_data) #> List of 23 #>  $ patient_id  : chr \"123456\" #>  $ name        : chr \"Einstein\" #>  $ first_name  : chr \"Albert\" #>  $ initials    : chr \"EA\" #>  $ dob         : logi NA #>  $ birth_year  : logi NA #>  $ gender      : logi NA #>  $ study       : chr \"GE FEST\" #>  $ pat_study_id: logi NA #>  $ file_name   : chr \"IrisCSV.TXT\" #>  $ device      : chr \"Iris\" #>  $ substrate   : chr \"acetate\" #>  $ record_date : chr \"2013-09-13\" #>  $ start_time  : chr \"2013-09-13\" #>  $ end_time    : chr \"2013-09-13\" #>  $ test_no     : int 9999 #>  $ dose        : num 100 #>  $ height      : num 180 #>  $ weight      : num 75 #>  $ t50         : logi NA #>  $ gec         : logi NA #>  $ tlag        : logi NA #>  $ data        :'data.frame':\t14 obs. of  3 variables: #>   ..$ minute: num [1:14] 0 10 20 45 60 75 90 105 120 140 ... #>   ..$ dob   : num [1:14] 0 2.02 5.22 8.9 9.48 ... #>   ..$ pdr   : num [1:14] 0 1.11 2.86 4.87 5.19 ... #>  - attr(*, \"class\")= chr \"breathtest_data\" # Convert to a format that can be fed to one of the fit functions iris_df = cleanup_data(iris_csv_data) # Individual curve fit coef(nls_fit(iris_df))  #> # A tibble: 9 × 5 #>   patient_id group parameter method                      value #>   <chr>      <chr> <chr>     <chr>                       <dbl> #> 1 123456     A     m         exp_beta                 31.9     #> 2 123456     A     k         exp_beta                  0.00451 #> 3 123456     A     beta      exp_beta                  1.93    #> 4 123456     A     deviance  exp_beta                  0.696   #> 5 123456     A     t50       bluck_coward             70.7     #> 6 123456     A     t50       maes_ghoos              266.      #> 7 123456     A     t50       maes_ghoos_scintigraphy 178.      #> 8 123456     A     tlag      bluck_coward             -7.53    #> 9 123456     A     tlag      maes_ghoos              146."},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_read_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Snoop method to read breath test file — breathtest_read_function","title":"Snoop method to read breath test file — breathtest_read_function","text":"Reads first line file, returns best matching function read breath test data . automatically read file inferred file type, use read_any_breathtest. Excel files, first sheet read.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_read_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snoop method to read breath test file — breathtest_read_function","text":"","code":"breathtest_read_function(filename = NULL, text = NULL)"},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_read_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snoop method to read breath test file — breathtest_read_function","text":"filename breath test data file Iris/Wagner (extended CSV),  BreathID text alternative filename, pass text file directly. parameter used Excel files.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_read_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Snoop method to read breath test file — breathtest_read_function","text":"Function read file text; NULL matching function  found","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/breathtest_read_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Snoop method to read breath test file — breathtest_read_function","text":"","code":"file = btcore_file(\"IrisCSV.TXT\")  # Get function to read this file. Returns \\code{\\link{read_iris_csv}}.  read_fun = breathtest_read_function(file)  str(read_fun(file)) #> List of 23 #>  $ patient_id  : chr \"123456\" #>  $ name        : chr \"Einstein\" #>  $ first_name  : chr \"Albert\" #>  $ initials    : chr \"EA\" #>  $ dob         : logi NA #>  $ birth_year  : logi NA #>  $ gender      : logi NA #>  $ study       : chr \"GE FEST\" #>  $ pat_study_id: logi NA #>  $ file_name   : chr \"IrisCSV.TXT\" #>  $ device      : chr \"Iris\" #>  $ substrate   : chr \"acetate\" #>  $ record_date : chr \"2013-09-13\" #>  $ start_time  : chr \"2013-09-13\" #>  $ end_time    : chr \"2013-09-13\" #>  $ test_no     : int 9999 #>  $ dose        : num 100 #>  $ height      : num 180 #>  $ weight      : num 75 #>  $ t50         : logi NA #>  $ gec         : logi NA #>  $ tlag        : logi NA #>  $ data        :'data.frame':\t14 obs. of  3 variables: #>   ..$ minute: num [1:14] 0 10 20 45 60 75 90 105 120 140 ... #>   ..$ dob   : num [1:14] 0 2.02 5.22 8.9 9.48 ... #>   ..$ pdr   : num [1:14] 0 1.11 2.86 4.87 5.19 ... #>  - attr(*, \"class\")= chr \"breathtest_data\"  # or, simple (returns a list!)  str(read_any_breathtest(file), 1 ) #> List of 1 #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  - attr(*, \"class\")= chr \"breathtest_data_list\""},{"path":"https://dmenne.github.io/breathtestcore/reference/btcore_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to example breath test data file — btcore_file","title":"Path to example breath test data file — btcore_file","text":"Path example breath test data file","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/btcore_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to example breath test data file — btcore_file","text":"","code":"btcore_file(filename = NULL, full.names = FALSE)"},{"path":"https://dmenne.github.io/breathtestcore/reference/btcore_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path to example breath test data file — btcore_file","text":"filename example file extdata directory without path.  Case sensitive Unix. filename missing, returns names  available sample files. full.names filename NULL, return full path names","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/btcore_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to example breath test data file — btcore_file","text":"full filename example file use read_xxx","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/btcore_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to example breath test data file — btcore_file","text":"","code":"head(btcore_file()) #> [1] \"350_20023_0_GERWithNan.txt\"       \"350_20043_0_GER.txt\"              #> [3] \"350_20043_0_GERBadHeader.txt\"     \"350_20043_0_GERDuplicateTime.txt\" #> [5] \"350_20043_0_GERNoData.txt\"        \"350_20043_0_GERNoT50.txt\"           filename = btcore_file(\"IrisMulti.TXT\")   data = read_iris(filename)"},{"path":"https://dmenne.github.io/breathtestcore/reference/cleanup_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms 13C breath data into a clean format for fitting — cleanup_data","title":"Transforms 13C breath data into a clean format for fitting — cleanup_data","text":"Accepts various data formats ungrouped grouped 13C breath  test time series, transforms data frame can used fitting functions, e.g. nls_fit. doubt, pass data frame cleanup_data forwarding  fitting function. function repair format, gives better error messages xxx_fit functions.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/cleanup_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms 13C breath data into a clean format for fitting — cleanup_data","text":"","code":"cleanup_data(data, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/cleanup_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms 13C breath data into a clean format for fitting — cleanup_data","text":"data data frame, array tibble least two numeric columns     optional names minute pdr fit     single 13C record. data frame tibble three columns named patient_id,    minute pdr. matrix can converted one . list data frames/tibbles concatenated. list     named elements, names converted group labels. list elements    named, group name used items. structure class breathtest_data, imported    file read_any_breathtest list class breathtest_data_list generated  read function read_breathid_xml ... optional. use_filename_as_patient_id Always use filename instead    patient name. Use patient id unique.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/cleanup_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms 13C breath data into a clean format for fitting — cleanup_data","text":"tibble 4 columns. Column patient_id created dummy entry pat_a patient_id present input data set.  column group required input data patients different  treatment groups within-subject repeats, e.g. crossover design.  dummy group name \"\" added group column available input data set. group present, hint analysis functions  post-hoc breakdown use grouping variable population-based methods. patient can records multiple groups, example cross- designs. Columns minute pdr given input, negative minute values removed, entry 0 minutes shifted 0.01 minutes  fit methods handle singularity t=0. error raised dummy columns patient_id group  added unique way, .e. multiple values given minute  disambiguated. Comments persistent; multiple comments concatenated newline separators.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/cleanup_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms 13C breath data into a clean format for fitting — cleanup_data","text":"","code":"options(digits = 4) # Full manual minute = seq(0,30, by = 10) data1 = data.frame(minute,     pdr = exp_beta(minute, dose = 100, m = 30,  k = 0.01, beta = 2)) # Two columns with data at t = 0 data1 #>   minute    pdr #> 1      0  0.000 #> 2     10  5.166 #> 3     20  8.905 #> 4     30 11.520 # Four columns with data at t = 0.01 cleanup_data(data1) #>   patient_id group minute    pdr #> 1      pat_a     A   0.01  0.000 #> 2      pat_a     A  10.00  5.166 #> 3      pat_a     A  20.00  8.905 #> 4      pat_a     A  30.00 11.520  # Results from simulate_breathtest_data can be passed directly to cleanup_data cleanup_data(simulate_breathtest_data(3)) #> # A tibble: 33 × 4 #>    patient_id group minute   pdr #>    <chr>      <chr>  <dbl> <dbl> #>  1 rec_01     A          5    20 #>  2 rec_01     A         20    37 #>  3 rec_01     A         35    41 #>  4 rec_01     A         50    41 #>  5 rec_01     A         65    37 #>  6 rec_01     A         80    34 #>  7 rec_01     A         95    32 #>  8 rec_01     A        110    27 #>  9 rec_01     A        125    23 #> 10 rec_01     A        140    22 #> # … with 23 more rows # .. which implicitly does cleanup_data(simulate_breathtest_data(3)$data) #> # A tibble: 33 × 4 #>    patient_id group minute   pdr #>    <chr>      <chr>  <dbl> <dbl> #>  1 rec_01     A          5     3 #>  2 rec_01     A         20    12 #>  3 rec_01     A         35    17 #>  4 rec_01     A         50    18 #>  5 rec_01     A         65    20 #>  6 rec_01     A         80    20 #>  7 rec_01     A         95    19 #>  8 rec_01     A        110    19 #>  9 rec_01     A        125    17 #> 10 rec_01     A        140    15 #> # … with 23 more rows  # Use simulated data data2 = list(   Z = simulate_breathtest_data(seed = 10)$data,   Y = simulate_breathtest_data(seed = 11)$data) d = cleanup_data(data2) str(d) #> tibble [220 × 4] (S3: tbl_df/tbl/data.frame) #>  $ patient_id: chr [1:220] \"rec_01\" \"rec_01\" \"rec_01\" \"rec_01\" ... #>  $ group     : chr [1:220] \"Z\" \"Z\" \"Z\" \"Z\" ... #>  $ minute    : num [1:220] 5 20 35 50 65 80 95 110 125 140 ... #>  $ pdr       : num [1:220] 4 13 16 16 15 14 15 11 12 10 ... #>  - attr(*, \"comment\")= chr \"10 records,  m = 40, k =  0.010, beta =  2.0, cov-matrix, \\n Gaussian noise amplitude = 1, 0% missing\" unique(d$patient_id) #>  [1] \"rec_01\" \"rec_02\" \"rec_03\" \"rec_04\" \"rec_05\" \"rec_06\" \"rec_07\" \"rec_08\" #>  [9] \"rec_09\" \"rec_10\" unique(d$group) #> [1] \"Z\" \"Y\" # \"Z\" \"Y\"  # Mix multiple input formats f1 = btcore_file(\"350_20043_0_GER.txt\") f2 = btcore_file(\"IrisMulti.TXT\") f3 = btcore_file(\"IrisCSV.TXT\") # With a named list, the name is used as a group parameter data = list(A = read_breathid(f1), B = read_iris(f2), C = read_iris_csv(f3))  d = cleanup_data(data) str(d) #> tibble [115 × 4] (S3: tbl_df/tbl/data.frame) #>  $ patient_id: chr [1:115] \"350_20043_0_GER\" \"350_20043_0_GER\" \"350_20043_0_GER\" \"350_20043_0_GER\" ... #>  $ group     : chr [1:115] \"A\" \"A\" \"A\" \"A\" ... #>  $ minute    : num [1:115] 0.01 0.5 1.6 6.4 8.9 11.3 13.7 16 18.5 23.3 ... #>  $ pdr       : num [1:115] 0 -0.1 0.4 0.3 1.7 3.1 3.5 3.9 4.7 5.7 ... unique(d$patient_id) #> [1] \"350_20043_0_GER\" \"1871960\"         \"123456\"          # \"350_20043_0_GER\" \"1871960\"         \"123456\" # File name is used as patient name if none is available unique(d$group) #> [1] \"A\" \"B\" \"C\" # \"A\" \"B\" \"C\""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef.breathtestfit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 coef and summary for breathtestfit — coef.breathtestfit","title":"S3 coef and summary for breathtestfit — coef.breathtestfit","text":"Function coef extracts estimates t50,  tlag, fitted 13C beta  exponential models. result  fit$coef, without column stat, always \"estimate\" nls_fit nlme_fit. summary method extracts t50 Maes/Ghoos method","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef.breathtestfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 coef and summary for breathtestfit — coef.breathtestfit","text":"","code":"# S3 method for breathtestfit coef(object, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/coef.breathtestfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 coef and summary for breathtestfit — coef.breathtestfit","text":"object class breathtestfit, returned nls_fit  nlme_fit ... parameters passed methods","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef.breathtestfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 coef and summary for breathtestfit — coef.breathtestfit","text":"","code":"# Generate simulated data data = cleanup_data(simulate_breathtest_data()) # Fit with the population method fit = nlme_fit(data) # All coefficients in the long form coef(fit) #> # A tibble: 80 × 5 #>    patient_id group parameter method                      value #>    <chr>      <chr> <chr>     <chr>                       <dbl> #>  1 rec_01     A     m         exp_beta                 37.1     #>  2 rec_01     A     k         exp_beta                  0.00955 #>  3 rec_01     A     beta      exp_beta                  1.70    #>  4 rec_01     A     t50       bluck_coward             23.0     #>  5 rec_01     A     t50       maes_ghoos              115.      #>  6 rec_01     A     t50       maes_ghoos_scintigraphy  43.4     #>  7 rec_01     A     tlag      bluck_coward            -16.8     #>  8 rec_01     A     tlag      maes_ghoos               55.7     #>  9 rec_02     A     m         exp_beta                 43.3     #> 10 rec_02     A     k         exp_beta                  0.0112  #> # … with 70 more rows # Access coefficients directly fit$coef #> # A tibble: 80 × 6 #>    patient_id group parameter method                  stat         value #>    <chr>      <chr> <chr>     <chr>                   <chr>        <dbl> #>  1 rec_01     A     m         exp_beta                estimate  37.1     #>  2 rec_01     A     k         exp_beta                estimate   0.00955 #>  3 rec_01     A     beta      exp_beta                estimate   1.70    #>  4 rec_01     A     t50       bluck_coward            estimate  23.0     #>  5 rec_01     A     t50       maes_ghoos              estimate 115.      #>  6 rec_01     A     t50       maes_ghoos_scintigraphy estimate  43.4     #>  7 rec_01     A     tlag      bluck_coward            estimate -16.8     #>  8 rec_01     A     tlag      maes_ghoos              estimate  55.7     #>  9 rec_02     A     m         exp_beta                estimate  43.3     #> 10 rec_02     A     k         exp_beta                estimate   0.0112  #> # … with 70 more rows # Only t50 by Maes/Ghoos # Can also be used with stan fit (slow!) if (FALSE) { if (require(\"breathteststan\")) {   fit = stan_fit(data, iter = 300, chain = 1)   coef(fit)   # We get quantiles here in key/value format   unique(fit$coef$stat) } }"},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulates per-group breath test parameters — coef_by_group","title":"Tabulates per-group breath test parameters — coef_by_group","text":"Given fit 13C breath test curves, computes absolute values confidence intervals parameters, e.g. half emptying time t50. Generic S3 method class breathtestfit.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulates per-group breath test parameters — coef_by_group","text":"","code":"coef_by_group(fit, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulates per-group breath test parameters — coef_by_group","text":"fit Object class breathtestfit, example  nlme_fit, nls_fit stan_fit ... used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulates per-group breath test parameters — coef_by_group","text":"tibble class coef_by_group columns parameter Parameter fit, e.g. beta, k, m, t50 method Method used compute parameter. exp_beta refers primary   fit parameters beta, k, m. maes_ghoos uses method    Maes B D, Ghoos Y F,   Rutgeerts P J, Hiele M , Geypens B Vantrappen G 1994 Dig. Dis. Sci. 39 S104-6.   bluck_coward self-correcting method  Bluck L J C    Coward W 2006 group Grouping parameter fit, e.g. patient, normal, liquid, solid estimate Parameter estimate conf.low, conf.high Lower upper 95   estimate. diff_group Letters , b, c indicate parameter mutually     significantly different groups. Letter combinations like ab abc     indicated parameter significantly different given     groups Tukey-corrected pairwise test.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulates per-group breath test parameters — coef_by_group","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(\"usz_13c\") data = usz_13c %>%   dplyr::filter( patient_id %in%     c(\"norm_001\", \"norm_002\", \"norm_003\", \"norm_004\", \"pat_001\", \"pat_002\",\"pat_003\")) %>%   cleanup_data() fit = nls_fit(data) coef_by_group(fit) #> # A tibble: 27 × 7 #>    parameter method   group         estimate  conf.low conf.high diff_group #>    <chr>     <chr>    <chr>            <dbl>     <dbl>     <dbl> <chr>      #>  1 beta      exp_beta liquid_normal  2.09      1.73      2.45    a          #>  2 beta      exp_beta solid_normal   2.23      1.92      2.54    a          #>  3 beta      exp_beta solid_patient  2.11      1.75      2.48    a          #>  4 deviance  exp_beta liquid_normal 16.8     -20.1      53.7     ab         #>  5 deviance  exp_beta solid_normal   2.72    -33.4      38.8     a          #>  6 deviance  exp_beta solid_patient 68.9      27.2     110.      b          #>  7 k         exp_beta liquid_normal  0.0131    0.0106    0.0156  b          #>  8 k         exp_beta solid_normal   0.00963   0.00737   0.0119  a          #>  9 k         exp_beta solid_patient  0.00704   0.00444   0.00965 a          #> 10 m         exp_beta liquid_normal 36.5      22.6      50.4     b          #> # … with 17 more rows # \\donttest{ fit = nlme_fit(data) coef_by_group(fit) #> # A tibble: 24 × 7 #>    parameter method       group         estimate conf.low conf.high diff_group #>    <chr>     <chr>        <chr>            <dbl>    <dbl>     <dbl> <chr>      #>  1 beta      exp_beta     liquid_normal  2.09     1.89      2.28    a          #>  2 beta      exp_beta     solid_normal   2.17     2.00      2.35    a          #>  3 beta      exp_beta     solid_patient  2.20     2.01      2.40    a          #>  4 k         exp_beta     liquid_normal  0.0131   0.0112    0.015   b          #>  5 k         exp_beta     solid_normal   0.00937  0.00764   0.0111  a          #>  6 k         exp_beta     solid_patient  0.00759  0.00559   0.00960 a          #>  7 m         exp_beta     liquid_normal 36.3     23.1      49.6     b          #>  8 m         exp_beta     solid_normal  20.8      7.72     33.9     a          #>  9 m         exp_beta     solid_patient 31.9     16.8      47.0     ab         #> 10 t50       bluck_coward liquid_normal 29.7     19.9      39.5     a          #> # … with 14 more rows # }"},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_diff_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulates breath test parameter differences of groups — coef_diff_by_group","title":"Tabulates breath test parameter differences of groups — coef_diff_by_group","text":"Given fit 13C breath test curves, computes -group confidence intervals p-values, examples half emptying time t50, correction multiple testing.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_diff_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulates breath test parameter differences of groups — coef_diff_by_group","text":"","code":"coef_diff_by_group(fit, mcp_group = \"Tukey\", reference_group = NULL, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_diff_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulates breath test parameter differences of groups — coef_diff_by_group","text":"fit Object class breathtestfit, example nlme_fit, nls_fit mcp_group \"Tukey\" (default) pairwise comparisons, \"Dunnett\" comparisons relative reference group. reference_group Used first group reference group mcp_group == \"Dunnett\" ... used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_diff_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulates breath test parameter differences of groups — coef_diff_by_group","text":"tibble class coef_diff_by_group columns parameter Parameter fit, e.g. beta, k, m, t50 method Method used compute parameter. exp_beta refers primary   fit parameters beta, k, m. maes_ghoos uses method   Maes B D, Ghoos Y F,   Rutgeerts P J, Hiele M , Geypens B Vantrappen G 1994 Dig. Dis. Sci. 39 S104-6.   bluck_coward self-correcting method  Bluck L J C   Coward W 2006 groups pairwise difference, e.g solid - liquid estimate Estimate difference conf.low, conf.high Lower upper 95   comparison significantly different zero estimates   sign. p.value p-value difference 0, corrected multiple testing","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/coef_diff_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulates breath test parameter differences of groups — coef_diff_by_group","text":"","code":"library(dplyr) data(\"usz_13c\") data = usz_13c %>%   dplyr::filter( patient_id %in%     c(\"norm_001\", \"norm_002\", \"norm_003\", \"norm_004\", \"pat_001\", \"pat_002\",\"pat_003\")) %>%   cleanup_data() fit = nls_fit(data) coef_diff_by_group(fit) #> # A tibble: 27 × 7 #>    parameter method   groups                 estimate conf.low conf.high p.value #>    <chr>     <chr>    <chr>                     <dbl>    <dbl>     <dbl>   <dbl> #>  1 beta      exp_beta solid_normal - liquid…  1.40e-1 -3.29e-1   6.09e-1 7.63e-1 #>  2 beta      exp_beta solid_patient - liqui…  2.45e-2 -4.77e-1   5.26e-1 9.93e-1 #>  3 beta      exp_beta solid_patient - solid… -1.16e-1 -5.85e-1   3.53e-1 8.32e-1 #>  4 deviance  exp_beta solid_normal - liquid… -1.41e+1 -2.96e+1   1.38e+0 8.21e-2 #>  5 deviance  exp_beta solid_patient - liqui…  5.20e+1 -2.95e+0   1.07e+2 6.76e-2 #>  6 deviance  exp_beta solid_patient - solid…  6.62e+1  1.17e+1   1.21e+2 1.31e-2 #>  7 k         exp_beta solid_normal - liquid… -3.45e-3 -6.00e-3  -9.01e-4 4.45e-3 #>  8 k         exp_beta solid_patient - liqui… -6.04e-3 -9.60e-3  -2.48e-3 2.25e-4 #>  9 k         exp_beta solid_patient - solid… -2.59e-3 -5.96e-3   7.93e-4 1.71e-1 #> 10 m         exp_beta solid_normal - liquid… -1.57e+1 -1.91e+1  -1.24e+1 0       #> # … with 17 more rows # \\donttest{ fit = nlme_fit(data) coef_diff_by_group(fit) #> # A tibble: 24 × 7 #>    parameter method       groups            estimate conf.low conf.high  p.value #>    <chr>     <chr>        <chr>                <dbl>    <dbl>     <dbl>    <dbl> #>  1 beta      exp_beta     solid_normal - l…  8.74e-2 -1.70e-1   3.44e-1 7.05e- 1 #>  2 beta      exp_beta     solid_patient - …  1.17e-1 -1.58e-1   3.92e-1 5.78e- 1 #>  3 beta      exp_beta     solid_patient - …  2.96e-2 -2.27e-1   2.86e-1 9.61e- 1 #>  4 k         exp_beta     solid_normal - l… -3.73e-3 -5.35e-3  -2.11e-3 1.80e- 7 #>  5 k         exp_beta     solid_patient - … -5.51e-3 -8.22e-3  -2.80e-3 4.52e- 6 #>  6 k         exp_beta     solid_patient - … -1.78e-3 -4.38e-3   8.21e-4 2.42e- 1 #>  7 m         exp_beta     solid_normal - l… -1.55e+1 -2.00e+1  -1.10e+1 7.44e-15 #>  8 m         exp_beta     solid_patient - … -4.48e+0 -2.44e+1   1.54e+1 8.54e- 1 #>  9 m         exp_beta     solid_patient - …  1.11e+1 -8.72e+0   3.08e+1 3.82e- 1 #> 10 t50       bluck_coward solid_normal - l…  1.49e+1  3.90e+0   2.59e+1 4.28e- 3 #> # … with 14 more rows # } # TODO: Add example for Stan fit typecast to class \\code{breathtestfit} to compute # confidence intervals instead of credible intervals"},{"path":"https://dmenne.github.io/breathtestcore/reference/cum_exp_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative exponential beta function — cum_exp_beta","title":"Cumulative exponential beta function — cum_exp_beta","text":"Equation (2), page 4 Bluck, \"Recent advances interpretation 13C octanoate breath test gastric emptying\"","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/cum_exp_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative exponential beta function — cum_exp_beta","text":"","code":"cum_exp_beta(minute, dose, cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/cum_exp_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative exponential beta function — cum_exp_beta","text":"minute time minutes dose mg cf named vector coefficients; k beta required. Note k measured 1/min (e_g_ 0_01/min), often quoted 1/h (e_g_ 0_6/h).","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/cum_exp_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative exponential beta function — cum_exp_beta","text":"Vector predicted cumulative pdr","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert breath test DOB data to PDR data — dob_to_pdr","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"Convert DOB (delta--baseline) PDR 13C breath test.  equation (4) Sanaka, Yamamoto, Tsutsumi, Abe, Kuyama (2005) Wagner-Nelson method analysing atypical double-peaked excretion curve [13c]-octanoate gastric emptying breath test humans. Clinical experimental pharmacology physiology 32, 590-594.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"","code":"dob_to_pdr(   dob,   weight = 75,   height = 180,   mw = 167,   purity_percent = 99.1,   mg_substrate = 100 )"},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"dob Delta--baseline vector 0/00 weight Body weight kg; assumed 75 kg missing height Body height cm; assume 180 cm missing mw Molecular weight,  83.023388 g/mol acetate, 167 g/mol octanoate. Can also given string \"acetate\" \"octanoate\". purity_percent Purity percent mg_substrate Substrate mg","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"PDR percent dose/h","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"idea factor 10 equation (4) comes , possibly percent(PDR)/DOB(0/00). Kim Camillieri, Stable isotope breath  test gastric emptying, page 207, factor 0.1123 instead 0.01123  used, without factor 10. one correct?","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/dob_to_pdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert breath test DOB data to PDR data — dob_to_pdr","text":"","code":"filename = btcore_file(\"350_20049_0_GERWithWeight.txt\") bid = read_breathid(filename) bid$data$pdr1 = dob_to_pdr(bid$data$dob, weight=bid$weight, height=bid$height)  plot(bid$data$minute, bid$data$pdr1, main=\"points: from breath_id; line: computed\", type=\"l\") points(bid$data$minute, bid$data$pdr,col=\"red\",type=\"p\",pch=16)  # # Check how far our computed pdr is from the stored pdr var(bid$data$pdr1-bid$data$pdr) #> [1] 0.000952"},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential beta function for 13C breath data — exp_beta","title":"Exponential beta function for 13C breath data — exp_beta","text":"Function fit PDR time series data exponential-beta function given : Maes, B. D., B. J. Geypens, Y. F. Ghoos, M. . Hiele, P. J. Rutgeerts. 1998.  13C-Octanoic Acid Breath Test Gastric Emptying Rate Solids.  Gastroenterology 114(4): 856-50 Sanaka M, Nakada K (2010) Stable isotope breath test assessing gastric emptying: comprehensive review.  J. Smooth Muscle Research 46(6): 267-280 Bluck L J C Coward W 2006 Measurement gastric emptying C-13-octanoate breath test --- rationalization scintigraphy Physiol. Meas. 27 279?89 review, see Bluck LJC (2009) Recent advances interpretation 13C octanoate breath test gastric emptying. Journal Breath Research, 3 1-8","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential beta function for 13C breath data — exp_beta","text":"","code":"exp_beta(minute, dose, m, k, beta)"},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential beta function for 13C breath data — exp_beta","text":"minute vector time values minutes dose mg m efficiency k time constant beta form factor","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential beta function for 13C breath data — exp_beta","text":"Values gradients estimated PDR use nls nlme","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential beta function for 13C breath data — exp_beta","text":"function defined minute == 0, function behaves like polynomial degree (beta-1).","code":"exp_beta = function(minute,dose,m,k,beta) {      m*dose*k*beta*(1-exp(-k*minute))^(beta-1)*exp(-k*minute) }"},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/exp_beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential beta function for 13C breath data — exp_beta","text":"","code":"start = list(m=20,k=1/100,beta=2)  # fit to real data set and show different t50 results sample_file = btcore_file(\"350_20043_0_GER.txt\") # minute 0 must be removed to avoid singularity breath_id = read_breathid(sample_file) data = subset(breath_id$data, minute >0) sample_nls = nls(pdr~exp_beta(minute, 100, m, k, beta), data = data, start = start) data$pdr_fit_bluck=predict(sample_nls) plot(data$minute, data$pdr, pch=16, cex=0.7, xlab=\"time (min)\", ylab=\"PDR\",   main=\"t50 with different methods\") lines(data$minute,data$pdr_fit_bluck, col=\"blue\") t50 = t50_bluck_coward(coef(sample_nls)) t50_maes_ghoos = t50_maes_ghoos(coef(sample_nls)) t50scint = t50_maes_ghoos_scintigraphy(coef(sample_nls)) abline(v = t50, col = \"red\") abline(v = t50_maes_ghoos, col = \"darkgreen\", lty = 2) abline(v = breath_id$t50, col = \"black\", lty = 4) abline(v = t50scint, col = \"gray\", lty = 3) text(t50, 0, \"Self-corrected Bluck/Coward\", col = \"red\", adj = -0.01) text(breath_id$t50, 0.5,\"From BreathID device\",col = \"black\", adj=-0.01) text(t50scint, 1,\" Maes/Ghoos scintigraphic\", col = \"gray\", adj = -0.01) text(t50_maes_ghoos,1.5, \"Classic Maes/Ghoos\", col = \"darkgreen\", adj = -0.01)   # simulated data set dose = 100 set.seed(4711) # do not use minute 0, this gives singular gradients # if required, shift minute = 0 by a small positive amount, e.g. 0.1 # create simulated data pdr  = data.frame(minute=seq(2, 200, by = 10)) pdr$pdr =   exp_beta(pdr$minute, 100, start$m, start$k, start$beta) + rnorm(nrow(pdr), 0, 1) par(mfrow = c(1, 2)) # plot raw data plot(pdr$minute, pdr$pdr, pch=16, cex=0.5, xlab = \"time (min)\",ylab = \"PDR\") # compute fit pdr_nls = nls(pdr~exp_beta(minute, 100, m, k, beta), data = pdr, start = start) # compute prediction pdr$pd_rfit = predict(pdr_nls) lines(pdr$minute, pdr$pd_rfit, col=\"red\", lwd=2)  # plot cumulative plot(pdr$minute, cum_exp_beta(pdr$minute,100,coef(pdr_nls)), type=\"l\",      xlab = \"time (min)\", ylab = \"cumulative PDR\") # show t50 t50 = t50_bluck_coward(coef(pdr_nls)) tlag = tlag_bluck_coward(coef(pdr_nls)) abline(v = t50, col = \"gray\") abline(v = tlag,col = \"green\") abline(h = 50, col = \"gray\")    # create simulated data from several patients pdr1 = data.frame(patient = as.factor(letters[1:10])) pdr1$m = start$m*(1 + rnorm(nrow(pdr1), 0, 0.1)) pdr1$k = start$k*(1 + rnorm(nrow(pdr1), 0, 0.3)) pdr1$beta = start$beta*(1 + rnorm(nrow(pdr1), 0, 0.1)) pdr1  = merge(pdr1, expand.grid(minute = seq(2, 200, by = 10),     patient = letters[1:10])) pdr1 = pdr1[order(pdr1$patient, pdr1$minute), ]  # simulated case: for patient a, only data up to 50 minutes are available pdr1 = pdr1[!(pdr1$patient == \"a\" & pdr1$minute > 50),] set.seed(4711) pdr1$pdr =   with(pdr1, exp_beta(minute, 100, m, k, beta) + rnorm(nrow(pdr1), 0, 1))  # compute nls fit for patient a only: fails # the following line will produce an error message # \\donttest{ pdr_nls = try(nls(pdr~exp_beta(minute, 100, m, k, beta), data=pdr1, start=start,                   subset = patient==\"a\")) #> Warning: NaNs produced #> Error in qr.default(.swts * gr) :  #>   NA/NaN/Inf in foreign function call (arg 1) stopifnot(class(pdr_nls) == \"try-error\") # } # use nlme to fit the whole set with one truncated record suppressPackageStartupMessages(library(nlme)) pdr_nlme = nlme(pdr~exp_beta(minute,100,m,k,beta), data = pdr1,                 fixed = m+k+beta~1,                 random = m+k+beta~1,                 groups = ~patient,                 start = c(m = 20, k = 1/100, beta = 2)) coef(pdr_nlme) #>        m        k  beta #> a 21.999 0.008962 1.486 #> b 20.389 0.014743 1.983 #> c 20.003 0.015422 2.123 #> d 22.037 0.006304 1.398 #> e 17.453 0.009322 2.432 #> f 17.852 0.009003 2.351 #> g 20.306 0.007039 1.769 #> h  1.965 0.013929 5.710 #> i 16.586 0.005433 2.496 #> j 22.178 0.014617 1.564 pred_data = expand.grid(minute = seq(0, 400, 10), patient = letters[1:10]) pred_data$pdr = predict(pdr_nlme, newdata = pred_data) suppressPackageStartupMessages(library(ggplot2)) ggplot() +   geom_point(data = pdr1, aes(x = minute, y = pdr, color = \"red\")) +    geom_line(data = pred_data, aes(x = minute, y = pdr), color = \"black\", size=1) +   ggtitle(\"Short patient record 'a' gives a good fit with many missing data using nlme.\\n           Borrowing strength from nlme in action!\")+   facet_wrap(~patient) +   theme(legend.position=\"none\")"},{"path":"https://dmenne.github.io/breathtestcore/reference/extract_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts an ID from string IRIS CSV file — extract_id","title":"Extracts an ID from string IRIS CSV file — extract_id","text":"First tries extract digits, separating underscore  multiple blocks. give non-valid  id, returns  whole string without spaces periods, hoping makes sense. internal use, overridden exotic IDs","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/extract_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts an ID from string IRIS CSV file — extract_id","text":"","code":"extract_id(id)"},{"path":"https://dmenne.github.io/breathtestcore/reference/extract_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts an ID from string IRIS CSV file — extract_id","text":"id One item column Identifikation, e.g. \"KEK-ZH-Nr.2013-1234\"","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/extract_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts an ID from string IRIS CSV file — extract_id","text":"","code":"extract_id #> function (id)  #> { #>     id1 = paste(str_match_all(id, \"([\\\\d]+)\")[[1]][, 2], collapse = \"_\") #>     if (nchar(id1) >= 5)  #>         return(id1) #>     tolower(str_replace_all(id, \"[\\\\.\\\\-\\\\W]+\", \"_\")) #> } #> <bytecode: 0x55fec357e620> #> <environment: namespace:breathtestcore>"},{"path":"https://dmenne.github.io/breathtestcore/reference/nlme_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","title":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","text":"Fits exponential beta curves 13C breath test series data using mixed-model population approach. See https://menne-biomed.de/blog/breath-test-stan comparison single curve, mixed-model population Bayesian methods.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/nlme_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","text":"","code":"nlme_fit(   data,   dose = 100,   start = list(m = 30, k = 1/100, beta = 2),   sample_minutes = 15 )"},{"path":"https://dmenne.github.io/breathtestcore/reference/nlme_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","text":"data Data frame tibble created cleanup_data, mandatory columns patient_id, group, minute pdr. recommended run data cleanup_data insert dummy columns patient_id group data distinct, report error . least 2 records required population fit, 10 recommended obtain stable result. dose Dose acetate octanoate. Currently, one common dose records supported. dose affects parameter m  fit; important t50-parameters unaffected dose. start Optional start values. case, default values good enough achieve convergence, slightly different values beta (1 2.5) can save non-convergent run. sample_minutes mean sampling interval < sampleMinutes,  data subsampled using spline algorithm function subsample_data. See graphical output plot.breathtestfit example densely sampled data one patients subsampled fit.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/nlme_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","text":"list class (\"breathtestnlmefit\" \"breathtestfit\") elements coef Estimated parameters key-value format     columns patient_id, group, parameter, stat, method value.    Parameter stat currently always value \"estimate\".     Confidence intervals added later, take granted     parameters estimates.  attribute AIC can retrieved    S3-function AIC. data data effectively fitted. points closely sampled    input, e.g. BreathId devices, data subsampled fitting.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/nlme_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed-model nlme fit to 13C Breath Data — nlme_fit","text":"","code":"d = simulate_breathtest_data(n_records = 3, noise = 0.7, seed = 4712) data = cleanup_data(d$data) fit = nlme_fit(data) plot(fit) # calls plot.breathtestfit  options(digits = 3) library(dplyr) cf = coef(fit) # The coefficients are in long key-value format cf #> # A tibble: 24 × 5 #>    patient_id group parameter method                      value #>    <chr>      <chr> <chr>     <chr>                       <dbl> #>  1 rec_01     A     m         exp_beta                 44.8     #>  2 rec_01     A     k         exp_beta                  0.00833 #>  3 rec_01     A     beta      exp_beta                  1.52    #>  4 rec_01     A     t50       bluck_coward             16.3     #>  5 rec_01     A     t50       maes_ghoos              120.      #>  6 rec_01     A     t50       maes_ghoos_scintigraphy  48.4     #>  7 rec_01     A     tlag      bluck_coward            -33.3     #>  8 rec_01     A     tlag      maes_ghoos               49.9     #>  9 rec_02     A     m         exp_beta                 40.0     #> 10 rec_02     A     k         exp_beta                  0.0122  #> # … with 14 more rows # AIC can be extracted AIC(fit) #> [1] 133 # Reformat the coefficients to wide format and compare  # with the expected coefficients from the simulation  # in d$record. cf %>%   filter(grepl(\"m|k|beta\", parameter )) %>%   select(-method, -group) %>%   tidyr::spread(parameter, value) %>%   inner_join(d$record, by = \"patient_id\") %>%   select(patient_id, m_in = m.y, m_out = m.x,          beta_in = beta.y, beta_out = beta.x,          k_in = k.y, k_out = k.x) #> # A tibble: 3 × 7 #>   patient_id  m_in m_out beta_in beta_out    k_in   k_out #>   <chr>      <dbl> <dbl>   <dbl>    <dbl>   <dbl>   <dbl> #> 1 rec_01        44  44.8    1.46     1.52 0.00817 0.00833 #> 2 rec_02        39  40.0    2.73     2.77 0.0124  0.0122  #> 3 rec_03        42  35.2    2.20     2.55 0.00722 0.00907"},{"path":"https://dmenne.github.io/breathtestcore/reference/nls_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual curve fit with nls to 13C breath test data — nls_fit","title":"Individual curve fit with nls to 13C breath test data — nls_fit","text":"Fits individual exponential beta curves 13C breath test time series","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/nls_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual curve fit with nls to 13C breath test data — nls_fit","text":"","code":"nls_fit(data, dose = 100, start = list(m = 50, k = 1/100, beta = 2))"},{"path":"https://dmenne.github.io/breathtestcore/reference/nls_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual curve fit with nls to 13C breath test data — nls_fit","text":"data Data frame tibble created cleanup_data,  mandatory columns patient_id, group, minute pdr.  recommended run data cleanup_data insert dummy columns patient_id minute data distinct, report error . dose Dose acetate octanoate. Currently, one common dose records supported. start Optional start values patient_id group.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/nls_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual curve fit with nls to 13C breath test data — nls_fit","text":"list class (\"breathtestnlsfit\" \"breathtestfit\") elements coef Estimated parameters key-value format     columns patient_id, group, parameter, stat, method value.    Parameter stat always value \"estimate\".    Confidence intervals might added later, take granted     parameters estimates. data Input data; nls_fit decimate data.     large data sets subsampling might required achieve faster convergence,    using nls_fit anyway relevant show .     Use nlme_fit stan_fit instead.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/nls_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual curve fit with nls to 13C breath test data — nls_fit","text":"","code":"d = simulate_breathtest_data(n_records = 3, noise = 0.2, seed = 4711) data = cleanup_data(d$data) fit = nls_fit(data) plot(fit) # calls plot.breathtestfit  options(digits = 2) cf = coef(fit) library(dplyr) cf %>%    filter(grepl(\"m|k|beta\", parameter )) %>%    select(-method, -group) %>%    tidyr::spread(parameter, value) %>%    inner_join(d$record, by = \"patient_id\") %>%    select(patient_id, m_in = m.y, m_out = m.x,           beta_in = beta.y, beta_out = beta.x,          k_in = k.y, k_out = k.x) #> # A tibble: 3 × 7 #>   patient_id  m_in m_out beta_in beta_out    k_in   k_out #>   <chr>      <dbl> <dbl>   <dbl>    <dbl>   <dbl>   <dbl> #> 1 rec_01        58  58.0    2.33     2.34 0.00898 0.00895 #> 2 rec_02        54  53.6    1.61     1.61 0.00847 0.00852 #> 3 rec_03        52  51.6    1.98     1.99 0.00623 0.00626"},{"path":"https://dmenne.github.io/breathtestcore/reference/null_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to class breathtestfit — null_fit","title":"Convert data to class breathtestfit — null_fit","text":"change data set, returns class suitable plotting raw data plot.breathtestfit.  See read_any_breathtest example.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/null_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to class breathtestfit — null_fit","text":"","code":"null_fit(data, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/null_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to class breathtestfit — null_fit","text":"data Data frame tibble created cleanup_data,  mandatory columns patient_id, group, minute pdr. ... used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/null_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data to class breathtestfit — null_fit","text":"list classes breathtestnullfit, breathtestfit element data contains unmodified data.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/plot.breathtestfit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 plot method for breathtestfit — plot.breathtestfit","title":"S3 plot method for breathtestfit — plot.breathtestfit","text":"Plots 13C data fits.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/plot.breathtestfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 plot method for breathtestfit — plot.breathtestfit","text":"","code":"# S3 method for breathtestfit plot(   x,   inc = 5,   method_t50 = \"maes_ghoos\",   line_size = 1,   point_size = NULL,   ... )"},{"path":"https://dmenne.github.io/breathtestcore/reference/plot.breathtestfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 plot method for breathtestfit — plot.breathtestfit","text":"x object class breathtestfit, returned nls_fit,  nlme_fit, null_fit stan_fit; stan_fit package breathteststan, inc Increment fitted curve plot minutes method_t50 Method t50: \"maes_ghoos\", \"bluck_coward\"  \"maes_ghoos_scintigraphy\" line_size optional line width; can improve look printouts point_size optional point size; determined dynamically NULL ... parameters passed methods. used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/plot.breathtestfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 plot method for breathtestfit — plot.breathtestfit","text":"","code":"data = list(   A = simulate_breathtest_data(n_records = 6, seed = 100),   B = simulate_breathtest_data(n_records = 4, seed = 187)  ) # cleanup_data combines the list into a data frame x = nls_fit(cleanup_data(data)) plot(x)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_any_breathtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Read breathtest files of any format — read_any_breathtest","title":"Read breathtest files of any format — read_any_breathtest","text":"Uses breathtest_read_function determine file type reads valid format.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_any_breathtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read breathtest files of any format — read_any_breathtest","text":"","code":"read_any_breathtest(files)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_any_breathtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read breathtest files of any format — read_any_breathtest","text":"files single filename, list character vector filenames.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_any_breathtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read breathtest files of any format — read_any_breathtest","text":"list breathtest_data, even one file passed. list can passed cleanup_data extract one concatenated data frame processing nls_fit,   nlme_fit, null_fit (processing) stan_fit separate package breathteststan.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_any_breathtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read breathtest files of any format — read_any_breathtest","text":"","code":"files = c(   group_a = btcore_file(\"IrisCSV.TXT\"),   group_a = btcore_file(\"350_20043_0_GER.txt\"),   group_b = btcore_file(\"IrisMulti.TXT\"),   group_b = btcore_file(\"NewBreathID_01.xml\")    )  bt = read_any_breathtest(files)  str(bt, 1) #> List of 4 #>  $ group_a:List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ group_a:List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ group_b:List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ group_b:List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  - attr(*, \"class\")= chr \"breathtest_data_list\"  # Passing through cleanup_data gives a data frame/tibble  bt_df = cleanup_data(bt)  str(bt_df) #> tibble [136 × 4] (S3: tbl_df/tbl/data.frame) #>  $ patient_id: chr [1:136] \"123456\" \"123456\" \"123456\" \"123456\" ... #>  $ group     : chr [1:136] \"group_a\" \"group_a\" \"group_a\" \"group_a\" ... #>  $ minute    : num [1:136] 0.01 10 20 45 60 75 90 105 120 140 ... #>  $ pdr       : num [1:136] 0 1.11 2.86 4.87 5.19 ...  # If you want data only, use null_fit()  plot(null_fit(bt_df))   # Plot population fit with decimated data  plot(nlme_fit(bt_df))"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid.html","id":null,"dir":"Reference","previous_headings":"","what":"Read BreathID file — read_breathid","title":"Read BreathID file — read_breathid","text":"Reads 13c data BreathID file, returns structure  class breathtest_data.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read BreathID file — read_breathid","text":"","code":"read_breathid(filename = NULL, text = NULL)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read BreathID file — read_breathid","text":"filename name txt-file read text alternatively, text can given string","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read BreathID file — read_breathid","text":"Structure class breathtest_data","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read BreathID file — read_breathid","text":"","code":"filename = btcore_file(\"350_20043_0_GER.txt\") # Show first lines cat(readLines(filename, n = 10), sep=\"\\n\") #> Test and Patient parameters\t\t\t\t\t #>  #> \t\t\t\t\t #> Date           -    12/11/12\t\t\t\t\t #> End time       -    08:54\t\t\t\t\t #> Start time     -    12:49\t\t\t\t\t #> Patient # - 0\t\t\t\t\t #> Patient ID   - Franz \t\t\t\t\t #> Test No.   -    20043\t\t\t\t\t #> Type       -    Octanoic-Acid\t\t\t\t\t # bid = read_breathid(filename) str(bid) #> List of 23 #>  $ patient_id  : chr \"0\" #>  $ name        : logi NA #>  $ first_name  : logi NA #>  $ initials    : logi NA #>  $ dob         : logi NA #>  $ birth_year  : logi NA #>  $ gender      : chr \"m\" #>  $ study       : logi NA #>  $ pat_study_id: logi NA #>  $ file_name   : chr \"350_20043_0_GER.txt\" #>  $ device      : chr \"BreathID\" #>  $ substrate   : chr \"octanoate\" #>  $ record_date : chr \"2012-12-11\" #>  $ start_time  : chr \"2012-12-11 08:54\" #>  $ end_time    : chr \"2012-12-11 12:49\" #>  $ test_no     : int 20043 #>  $ dose        : num 100 #>  $ height      : num 180 #>  $ weight      : num 75 #>  $ t50         : num 71.2 #>  $ gec         : num 2.99 #>  $ tlag        : num 28.2 #>  $ data        :'data.frame':\t87 obs. of  6 variables: #>   ..$ minute : num [1:87] 0 0.5 1.6 6.4 8.9 11.3 13.7 16 18.5 23.3 ... #>   ..$ dob    : num [1:87] 0 -0.1 0.4 0.3 1.6 2.9 3.3 3.7 4.5 5.4 ... #>   ..$ pdr    : num [1:87] 0 -0.1 0.4 0.3 1.7 3.1 3.5 3.9 4.7 5.7 ... #>   ..$ pdrfit : num [1:87] 0 0.2 0.5 1.8 2.5 3.1 3.7 4.2 4.8 5.7 ... #>   ..$ cpdr   : num [1:87] 0 0 0 0 0.1 0.2 0.3 0.4 0.6 1 ... #>   ..$ cpdrfit: num [1:87] 0 0 0 0.1 0.2 0.3 0.4 0.6 0.7 1.1 ... #>  - attr(*, \"class\")= chr \"breathtest_data\""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Read new BreathID/Examens XML file — read_breathid_xml","title":"Read new BreathID/Examens XML file — read_breathid_xml","text":"Reads 13c data XML BreathID file, returns structure  class breathtest_data_list, list elements  class breathtest_data.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read new BreathID/Examens XML file — read_breathid_xml","text":"","code":"read_breathid_xml(filename = NULL, text = NULL)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read new BreathID/Examens XML file — read_breathid_xml","text":"filename name xml-file read text alternatively, text can given string","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read new BreathID/Examens XML file — read_breathid_xml","text":"List class breathtest_data_list structures  class breathtest_data; XML file can contain multiple data sets.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathid_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read new BreathID/Examens XML file — read_breathid_xml","text":"","code":"filename = btcore_file(\"NewBreathID_01.xml\") # Show first lines cat(readLines(filename, n = 10), sep=\"\\n\") #> <Tests Device=\"1402\"> #>   <Test Number=\"12\"> #>     <ID>10727002<\/ID> #>     <StartTime>24Jul2017 07:42<\/StartTime> #>     <EndTime>24Jul2017 12:03<\/EndTime> #>     <LastResultCode>1<\/LastResultCode> #>     <StoppedByUser>false<\/StoppedByUser> #>     <DOBListTimes>1.33,12.79,24.25,35.81,57.90,69.38,80.87,92.33,103.78,115.22,126.68,138.14,149.59,161.09,172.59,184.07,195.55,208.15,219.64,231.10,242.57<\/DOBListTimes> #>     <DOBListValues>0.7,1.8,3.7,4.9,7.5,8.6,10.2,11.5,10.4,9.7,10.8,10.7,11.7,11.7,11.4,10.6,8.5,8.4,6.9,7.6,7.1<\/DOBListValues> #>   <\/Test> bid = read_breathid_xml(filename) # List with length 1 str(bid, 1) #> List of 1 #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  - attr(*, \"class\")= chr \"breathtest_data_list\" filename = btcore_file(\"NewBreathID_multiple.xml\") bids = read_breathid_xml(filename) str(bids, 1) # 3 elements - the others in the file have no data #> List of 3 #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  - attr(*, \"class\")= chr \"breathtest_data_list\" # Create hook function to deselect first record choose_record = function(records) {   r  = rep(TRUE, length(records))   r[1] = FALSE   r } options(breathtestcore.choose_record = choose_record) bids = read_breathid_xml(filename) str(bids, 1) # 2 elements, first deselected #> List of 2 #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  $ :List of 23 #>   ..- attr(*, \"class\")= chr \"breathtest_data\" #>  - attr(*, \"class\")= chr \"breathtest_data_list\""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathtest_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads breathtest data in Excel format — read_breathtest_excel","title":"Reads breathtest data in Excel format — read_breathtest_excel","text":"Can read several formats data sets Excel, 2 (minute, pdr dob 1 record) 4 columns (patient_id,  group, minute, pdr dob). Conversion dob pdf done  assuming 180 cm height 75 kg weight. See example several sheets supported formats","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathtest_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads breathtest data in Excel format — read_breathtest_excel","text":"","code":"read_breathtest_excel(filename, sheet = 1)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathtest_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads breathtest data in Excel format — read_breathtest_excel","text":"filename Name Excel-file read sheet Name number Excel file read. used  read_any_breathtest, first sheet always read. must  call  read_breathtest_excel explicitly read worksheets, shown example .","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathtest_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads breathtest data in Excel format — read_breathtest_excel","text":"Different readXXX function, returns list data frame, structure breathtest_data.  Pass result cleanup_data make compatible  formats.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_breathtest_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads breathtest data in Excel format — read_breathtest_excel","text":"","code":"filename = btcore_file(\"ExcelSamples.xlsx\") sheets = readxl::excel_sheets(filename) # First 4 lines of each sheet for (sheet in sheets) {   cat(\"\\nSheet \", sheet,\"\\n\")   ex = readxl::read_excel(filename, sheet = sheet, n_max = 4)   print(ex) }   #>  #> Sheet  4col_1group  #> # A tibble: 4 × 4 #>   patient_id group minute   pdr #>        <dbl> <chr>  <dbl> <dbl> #> 1    7951444 A       0.42 0.547 #> 2    7951444 A      11.9  1.64  #> 3    7951444 A      23.4  3.89  #> 4    7951444 A      34.9  6.13  #>  #> Sheet  4col_2group  #> # A tibble: 4 × 4 #>   patient_id group         minute   pdr #>   <chr>      <chr>          <dbl> <dbl> #> 1 norm_001   liquid_normal     10   2.6 #> 2 norm_001   liquid_normal     20   8.1 #> 3 norm_001   liquid_normal     30  10.7 #> 4 norm_001   liquid_normal     40   9.1 #>  #> Sheet  4col_2group_spaces  #> # A tibble: 4 × 4 #>   patient_id group         minute   pdr #>   <chr>      <chr>          <dbl> <dbl> #> 1 norm 001   liquid normal     10   2.6 #> 2 norm 001   liquid normal     20   8.1 #> 3 norm 001   liquid normal     30  10.7 #> 4 norm 001   liquid normal     40   9.1 #>  #> Sheet  4col_2group_dob  #> # A tibble: 4 × 4 #>   patient_id group         minute   dob #>   <chr>      <chr>          <dbl> <dbl> #> 1 norm_001   liquid_normal     10  0.26 #> 2 norm_001   liquid_normal     20  0.81 #> 3 norm_001   liquid_normal     30  1.07 #> 4 norm_001   liquid_normal     40  0.91 #>  #> Sheet  3col  #> # A tibble: 4 × 3 #>   patient_id minute   pdr #>        <dbl>  <dbl> <dbl> #> 1    7951500   0.42 0.547 #> 2    7951500  11.9  1.64  #> 3    7951500  23.4  3.89  #> 4    7951500  34.9  6.13  #>  #> Sheet  2col  #> # A tibble: 4 × 2 #>   minute   pdr #>    <dbl> <dbl> #> 1   0.42 0.547 #> 2  11.9  1.64  #> 3  23.4  3.89  #> 4  34.9  6.13  #>  #> Sheet  bad_header  #> # A tibble: 4 × 4 #>   `7951444` A     `0.42` `0.54737400595475105` #>       <dbl> <chr>  <dbl>                 <dbl> #> 1   7951444 A       11.9                  1.64 #> 2   7951444 A       23.4                  3.89 #> 3   7951444 A       34.9                  6.13 #> 4   7951444 A       46.4                  8.16 #>  #> Sheet  bad_order  #> # A tibble: 4 × 4 #>   group minute   pdr patient_id #>   <chr>  <dbl> <dbl>      <dbl> #> 1 A       0.42 0.547    7951444 #> 2 A      11.9  1.64     7951444 #> 3 A      23.4  3.89     7951444 #> 4 A      34.9  6.13     7951444 #>  #> Sheet  bad_columns  #> # A tibble: 4 × 1 #>   patient_id #>   <chr>      #> 1 a          #> 2 b          #> 3 c          #> 4 d          # To get consistently formatted data from a sheet bt_data = read_breathtest_excel(filename, sheets[6]) # 3 columns str(bt_data) #> List of 1 #>  $ : tibble [22 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ minute: num [1:22] 0.42 11.92 23.4 34.89 46.39 ... #>   ..$ pdr   : num [1:22] 0.547 1.642 3.886 6.131 8.156 ... bt_cleaned = cleanup_data(bt_data) # 4 columns standard format str(bt_cleaned) #> tibble [22 × 4] (S3: tbl_df/tbl/data.frame) #>  $ patient_id: chr [1:22] \"pat_a\" \"pat_a\" \"pat_a\" \"pat_a\" ... #>  $ group     : chr [1:22] \"A\" \"A\" \"A\" \"A\" ... #>  $ minute    : num [1:22] 0.42 11.92 23.4 34.89 46.39 ... #>  $ pdr       : num [1:22] 0.547 1.642 3.886 6.131 8.156 ..."},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 13C data from IRIS/Wagner Analysen — read_iris","title":"Read 13C data from IRIS/Wagner Analysen — read_iris","text":"Reads composite files 13C data IRIS/Wagner Analysen. composite files start follows:","code":"\"Testergebnis\" \"Nummer\",\"1330\" \"Datum\",\"10.10.2013\" \"Testart\""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 13C data from IRIS/Wagner Analysen — read_iris","text":"","code":"read_iris(filename = NULL, text = NULL)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 13C data from IRIS/Wagner Analysen — read_iris","text":"filename name IRIS/Wagner file composite format text alternatively, text can given string","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 13C data from IRIS/Wagner Analysen — read_iris","text":"List class breathtest_data  file_name, patient_name, patient_first_name, test, identifikation, data frame data time dob","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read 13C data from IRIS/Wagner Analysen — read_iris","text":"","code":"filename = btcore_file(\"IrisMulti.TXT\") cat(readLines(filename, n = 10), sep=\"\\n\") #> \"Testergebnis\" #> \"Nummer\",\"22\" #> \"Datum\",\"12.06.2009\" #> \"Testart\" #> \"Name\",\"Magenentleerung fest\" #> \"Abk<fc>rzung\",\"GE FEST\" #> \"Substrat\",\"Natriumoktanoat\" #> \"Molekulargewicht [g/mol]\",\"0\" #> \"13C-Atome/Molek<fc>l\",\"1\" #> \"Anreicherung [%]\",\"0\" # iris_data = read_iris(filename) str(iris_data) #> List of 23 #>  $ patient_id  : chr \"1871960\" #>  $ name        : chr \"V\" #>  $ first_name  : chr \"S\" #>  $ initials    : chr \"VS\" #>  $ dob         : logi NA #>  $ birth_year  : logi NA #>  $ gender      : logi NA #>  $ study       : chr \"GE FEST\" #>  $ pat_study_id: logi NA #>  $ file_name   : chr \"IrisMulti.TXT\" #>  $ device      : chr \"Iris\" #>  $ substrate   : chr \"octanoate\" #>  $ record_date : chr \"2020-06-12\" #>  $ start_time  : chr \"2020-06-12\" #>  $ end_time    : chr \"2020-06-12\" #>  $ test_no     : int 22 #>  $ dose        : num 100 #>  $ height      : num 180 #>  $ weight      : num 80 #>  $ t50         : logi NA #>  $ gec         : logi NA #>  $ tlag        : logi NA #>  $ data        :'data.frame':\t14 obs. of  3 variables: #>   ..$ minute: num [1:14] 0 10 20 45 60 75 90 105 120 140 ... #>   ..$ dob   : num [1:14] 0 -2.46 1.13 1.39 2.91 2.35 3.24 4.27 3.22 3.64 ... #>   ..$ pdr   : num [1:14] 0 -2.8 1.29 1.58 3.32 ... #>  - attr(*, \"class\")= chr \"breathtest_data\""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","title":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","text":"Reads 13C data IRIS/Wagner Analysen CSV Format CSV files start follows: format information substrate (acetate, octanoate), dose body weight height. following defaults used: substrate = acetate,  dose = 100,  weight = 75, height = 180.","code":"\"Name\",\"Vorname\",\"Test\",\"Identifikation\""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","text":"","code":"read_iris_csv(filename = NULL, text = NULL)"},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","text":"filename Name IRIS/Wagner file CSV format text alternatively, text can given string","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","text":"List class breath_test_data file name,  patient name, patient first name, test, identifikation, data frame data time dob","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/read_iris_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read 13C data from IRIS/Wagner Analysen in CSV Format — read_iris_csv","text":"","code":"filename = btcore_file(\"IrisCSV.TXT\") cat(readLines(filename, n = 3), sep=\"\\n\") #> \"Name\",\"Vorname\",\"Test\",\"Identifikation\",\"Testzeit[min]\",\"DOB [o/oo]\",\"Delta [o/oo]\",\"Std. Abw.[o/oo]\",\"CO2 [%]\",\"Std. Abw.[%]\",\"Atom ppm Excess 13C [ppm]\",\"Datum\",\"Zeit\" #> \"Einstein\",\"Albert\",\"GE FEST\",\"123456\",\"0\",\"0\",\"-26.32\",\"4.501891E-02\",\"3.236342\",\"4.746388E-03\",\"0\",\"13.09.2013\",\"13:21\" #> \"Einstein\",\"Albert\",\"GE FEST\",\"123456\",\"10\",\"2.02\",\"-24.3\",\"5.617962E-02\",\"2.391013\",\"2.576674E-03\",\"22.27\",\"13.09.2013\",\"13:23\" # iris_data = read_iris_csv(filename) str(iris_data) #> List of 23 #>  $ patient_id  : chr \"123456\" #>  $ name        : chr \"Einstein\" #>  $ first_name  : chr \"Albert\" #>  $ initials    : chr \"EA\" #>  $ dob         : logi NA #>  $ birth_year  : logi NA #>  $ gender      : logi NA #>  $ study       : chr \"GE FEST\" #>  $ pat_study_id: logi NA #>  $ file_name   : chr \"IrisCSV.TXT\" #>  $ device      : chr \"Iris\" #>  $ substrate   : chr \"acetate\" #>  $ record_date : chr \"2013-09-13\" #>  $ start_time  : chr \"2013-09-13\" #>  $ end_time    : chr \"2013-09-13\" #>  $ test_no     : int 9999 #>  $ dose        : num 100 #>  $ height      : num 180 #>  $ weight      : num 75 #>  $ t50         : logi NA #>  $ gec         : logi NA #>  $ tlag        : logi NA #>  $ data        :'data.frame':\t14 obs. of  3 variables: #>   ..$ minute: num [1:14] 0 10 20 45 60 75 90 105 120 140 ... #>   ..$ dob   : num [1:14] 0 2.02 5.22 8.9 9.48 ... #>   ..$ pdr   : num [1:14] 0 1.11 2.86 4.87 5.19 ... #>  - attr(*, \"class\")= chr \"breathtest_data\""},{"path":"https://dmenne.github.io/breathtestcore/reference/sigma.breathtestnlmefit.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to extract the fit's residual standard deviation — sigma.breathtestnlmefit","title":"S3 method to extract the fit's residual standard deviation — sigma.breathtestnlmefit","text":"Functions nls nlme available;  additional functions Stan-based fits defined package breathteststan.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/sigma.breathtestnlmefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to extract the fit's residual standard deviation — sigma.breathtestnlmefit","text":"","code":"# S3 method for breathtestnlmefit sigma(object, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/sigma.breathtestnlmefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to extract the fit's residual standard deviation — sigma.breathtestnlmefit","text":"object Result class breathtestfit ... used","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/sigma.breathtestnlmefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to extract the fit's residual standard deviation — sigma.breathtestnlmefit","text":"numeric value giving standard deviation residuals.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/simulate_breathtest_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate 13C breath time series data — simulate_breathtest_data","title":"Simulate 13C breath time series data — simulate_breathtest_data","text":"Generates simulated breath test data, optionally errors. none three standard deviations m_std, k_std, beta_std given, empirical covariance matrix USZ breath test data used. standard deviations given, default values others used.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/simulate_breathtest_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate 13C breath time series data — simulate_breathtest_data","text":"","code":"simulate_breathtest_data(   n_records = 10,   m_mean = 40,   m_std = NULL,   k_mean = 0.01,   k_std = NULL,   beta_mean = 2,   beta_std = NULL,   noise = 1,   cov = NULL,   student_t_df = NULL,   missing = 0,   seed = NULL,   dose = 100,   first_minute = 5,   step_minute = 15,   max_minute = 155 )"},{"path":"https://dmenne.github.io/breathtestcore/reference/simulate_breathtest_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate 13C breath time series data — simulate_breathtest_data","text":"n_records Number records m_mean, m_std Mean -record standard deviation parameter m giving metabolized fraction. k_mean, k_std Mean -record standard deviation parameter k, units 1/minutes. beta_mean, beta_std Mean -record standard deviations lag parameter beta noise Standard deviation normal noise student_t_df = NULL; scaling noise student_t_df >= 2. cov Covariance matrix, default NULL, .e. used. given, overrides  standard deviation settings. student_t_df NULL (default), Gaussian noise added; >= 2, Student_t distributed noise added, generates realistic outliers. Values 2 5 useful, higher values used result comes close Gaussian noise. Values 2 truncated 2. missing 0 (default), curves number data points. > 0, fraction points removed randomly simulate missing seed Optional seed; set seed = NULL (default) dose Octanoate/acetate dose, almost always 100 mg, also default first_minute First sampling time. use 0 , algorithms  converge data near 0 passed. step_minute Inter-sample interval breath test max_minute Maximal time minutes.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/simulate_breathtest_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate 13C breath time series data — simulate_breathtest_data","text":"list class simulated_breathtest_data 2  elements: record Data frame columns     patient_id(chr), m, k, beta, t50 giving effective parameters      individual patient record. data Data frame columns     patient_id(chr), minute(dbl), pdr(dbl) giving      time series grouping parameters. comment attached return value can used title plotting.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/simulate_breathtest_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate 13C breath time series data — simulate_breathtest_data","text":"","code":"library(ggplot2) pdr = simulate_breathtest_data(n_records = 4, seed = 4711, missing = 0.3,        student_t_df = 2, noise = 1.5) # Strong outliers # str(pdr, 1)   #> List of 2 #>  $ record:'data.frame':\t4 obs. of  5 variables: #>   ..- attr(*, \"cov\")= num [1:3, 1:3] 1.88e+02 -2.60e-02 -2.04 -2.60e-02 7.74e-06 4.77e-04 -2.04 4.77e-04 1.82e-01 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>  $ data  : tibble [31 × 3] (S3: tbl_df/tbl/data.frame) #>   ..- attr(*, \"comment\")= chr \"4 records,  m = 40, k =  0.010, beta =  2.0, cov-matrix, \\n Student-t 2 df noise amplitude = 2, 30% missing\" #>  - attr(*, \"class\")= chr [1:2] \"simulated_breathtest_data\" \"list\" # pdr$record # The \"correct\" parameters #>   patient_id  m      k beta t50_maes_ghoos #> 1     rec_01 30 0.0086  2.0            142 #> 2     rec_02 27 0.0140  2.4            100 #> 3     rec_03 46 0.0098  1.4             97 #> 4     rec_04 56 0.0076  2.2            169 # # Explicit plotting ggplot(pdr$data, aes(x = minute, y = pdr)) + geom_point() +   facet_wrap(~patient_id) + ggtitle(comment(pdr$data))  # # Or use cleanup_data and null_fit for S3 plotting plot(null_fit(cleanup_data(pdr$data)))"},{"path":"https://dmenne.github.io/breathtestcore/reference/subsample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Decimate densely sampled 13C time series — subsample_data","title":"Decimate densely sampled 13C time series — subsample_data","text":"data record closely spaced sample_minutes,  spline-subsampled sample_minutes. region initial slope, .e. initial fifth time, record sampled densely. dense sampling leads non-convergent nlme fits long runs Stan-based fits.  function used internally function link{nlme_fit}  package breathtestcore exported  use  package breathteststan.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/subsample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decimate densely sampled 13C time series — subsample_data","text":"","code":"subsample_data(data, sample_minutes)"},{"path":"https://dmenne.github.io/breathtestcore/reference/subsample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decimate densely sampled 13C time series — subsample_data","text":"data Data frame columns patient_id, group, minute, pdr. sample_minutes Required average density. points closely spaced, data subsampled. upsampling occurs data sparse.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_bluck_coward.html","id":null,"dir":"Reference","previous_headings":"","what":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","title":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","text":"Uses Newton's method solve self-corrected Bluck-Coward equation 1/2 compute half-emptying time t_50. See also equation G(n,t) Bluck LJC, Jackson S, Vlasakakis G, Mander (2011) Bayesian hierarchical methods interpret  13C-octanoic acid breath test gastric emptying. Digestion 83_96-107, page 98.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_bluck_coward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","text":"","code":"t50_bluck_coward(cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_bluck_coward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","text":"cf Named vector coefficients; k beta required. package, k measured units 1/min (e.g. 0.01/min), publications often quoted 1/h (e.g. 0.6/h).","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_bluck_coward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","text":"Time value 1/2 maximum, .e. t_50 t_1/2 minutes;  publication Bluck et al, parameter called t_1/2().","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_bluck_coward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bluck-Coward self-corrected half-emptying time — t50_bluck_coward","text":"","code":"# From table 3 and 4 in Bluck et al.; values for \\code{k} and \\code{beta}  # (nls, bayesian) are entered and checked against the tabulated values of  # t_{1/2(in)}. # Most errors are small, but there are some outliers; errors in paper table? # Parameters and Bluck et al. results: # table 3 of Bluck et al. cf3 = data.frame(           method = rep(c(\"nls\", \"bayesian\")),           group = rep(c(\"lean\", \"obese\"),each=2),           k =    c(0.576,0.606,0.529,0.608),           beta = c(5.24, 5.79, 5.95, 7.54),           t12 =  c(3.67, 3.63, 4.23, 3.99),           t12in = c(2.076, 2.110, 2.422, 2.466),           tlag = c(2.88, 2.88, 3.34, 3.26),           tlagin = c(1.632, 1.724, 1.92, 2.101) ) cf3 = dplyr::mutate(cf3,           t50_maes_ghoos = t50_maes_ghoos(cf3),           t50_bluck_coward = t50_bluck_coward(cf3),           tlag_maes_ghoos = tlag_maes_ghoos(cf3),           tlag_bluck_coward = tlag_bluck_coward(cf3),           err_t50_maes_ghoos = round(100*(t50_maes_ghoos-t12)/t12, 2),           err_t50_bluck_coward =             round(100*(t50_bluck_coward-t12in)/t12in, 2),           err_lag_maes = round(100*(tlag_maes_ghoos-tlag)/tlag,2),           err_lag_bluck_coward =             round(100*(tlag_bluck_coward-tlagin)/tlagin,2) ) cf3 #>     method group    k beta t12 t12in tlag tlagin t50_maes_ghoos #> 1      nls  lean 0.58  5.2 3.7   2.1  2.9    1.6            3.6 #> 2 bayesian  lean 0.61  5.8 3.6   2.1  2.9    1.7            3.6 #> 3      nls obese 0.53  6.0 4.2   2.4  3.3    1.9            4.2 #> 4 bayesian obese 0.61  7.5 4.0   2.5  3.3    2.1            4.0 #>   t50_bluck_coward tlag_maes_ghoos tlag_bluck_coward err_t50_maes_ghoos #> 1              2.1             2.9               1.7              -1.21 #> 2              2.1             2.9               1.8              -0.81 #> 3              2.5             3.4               2.1              -1.34 #> 4              2.5             3.3               2.2               0.26 #>   err_t50_bluck_coward err_lag_maes err_lag_bluck_coward #> 1                 0.58        -0.15                  2.5 #> 2                 1.37         0.62                  1.8 #> 3                 3.18         0.94                  7.3 #> 4                 3.20         1.92                  3.9 # table 4 # there are large differences for mj3, both using the bayesian (26%) # and the nls method (16%).  The other data are within the expected limits cf4 = data.frame(           method = rep(c(\"nls\", \"bayesian\"),each=3),           group = rep(c(\"mj1\",   \"mj2\",   \"mj3\")),             k = c(0.585,  0.437,  0.380,  0.588,  0.418,  0.361),             beta=c(4.35,  4.08,  4.44,  4.49, 4.30, 4.29),            t12 = c(3.39, 4.25, 4.82, 3.40, 4.61, 5.09),            t12in = c(1.77, 2.16, 2.19, 1.81, 2.34, 2.43),            tlag = c(2.56, 3.17, 3.39, 2.58, 3.40, 3.62),            tlagin = c(1.30, 1.53, 1.33, 1.35, 1.65, 1.57) ) cf4 = dplyr::mutate(cf4,           t50_maes_ghoos = t50_maes_ghoos(cf4),           t50_bluck_coward = t50_bluck_coward(cf4),           tlag_maes_ghoos = tlag_maes_ghoos(cf4),           tlag_bluck_coward = tlag_bluck_coward(cf4),           err_t50_maes_ghoos = unlist(round(100*(t50_maes_ghoos-t12)/t12)),           err_t50_bluck_coward =             round(100*(t50_bluck_coward-t12in)/t12in,2),           err_lag_maes = round(100*(tlag_maes_ghoos-tlag)/tlag,2),           err_lag_bluck_coward =             round(100*(tlag_bluck_coward-tlagin)/tlagin,2) ) cf4 #>     method group    k beta t12 t12in tlag tlagin t50_maes_ghoos #> 1      nls   mj1 0.58  4.3 3.4   1.8  2.6    1.3            3.3 #> 2      nls   mj2 0.44  4.1 4.2   2.2  3.2    1.5            4.2 #> 3      nls   mj3 0.38  4.4 4.8   2.2  3.4    1.3            5.1 #> 4 bayesian   mj1 0.59  4.5 3.4   1.8  2.6    1.4            3.3 #> 5 bayesian   mj2 0.42  4.3 4.6   2.3  3.4    1.6            4.6 #> 6 bayesian   mj3 0.36  4.3 5.1   2.4  3.6    1.6            5.3 #>   t50_bluck_coward tlag_maes_ghoos tlag_bluck_coward err_t50_maes_ghoos #> 1              1.8             2.5               1.3                 -3 #> 2              2.2             3.2               1.6                  0 #> 3              2.8             3.9               2.1                  6 #> 4              1.8             2.6               1.4                 -3 #> 5              2.4             3.5               1.8                 -1 #> 6              2.8             4.0               2.1                  4 #>   err_t50_bluck_coward err_lag_maes err_lag_bluck_coward #> 1                -0.56         -1.8                  2.2 #> 2                 2.82          1.5                  6.6 #> 3                26.03         15.7                 57.8 #> 4                -0.50         -1.0                  1.9 #> 5                 4.19          2.6                 11.0 #> 6                15.93         11.4                 34.6"},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos.html","id":null,"dir":"Reference","previous_headings":"","what":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","title":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","text":"Half-emptying time t50 determined fit beta exponential function. Maes/Ghoos model, defined time area curve (AUC) 50% AUC 0 infinity. Maes B D, Ghoos Y F, Rutgeerts P J, Hiele M , Geypens B Vantrappen G 1994  Dig. Dis. Sci. 39 S104-6.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","text":"","code":"t50_maes_ghoos(cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","text":"cf named vector coefficients; k beta required note k measured 1/min (e.g. 0.01/min), usually quoted 1/h (e.g. 0.6/h).","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","text":"Time minutes area curve 50% AUC infinity. Maes/Ghoos model, used surrogate gastric emptying  half time t50.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Half-emptying time by Maes/Ghoos method — t50_maes_ghoos","text":"","code":"# Integral from 0 to infinity is 100 at dose 100 mg integrate(exp_beta, 0, Inf, beta = 1.5, k = 0.01, m = 1, dose = 100) #> 100 with absolute error < 0.0014 t50_mg = t50_maes_ghoos(c(beta = 1.5, k = 0.01, dose = 100)) t50_mg #> [1] 99 # Integral to half-emptying time \\code{t50_maes_ghoos} is 50  integrate(exp_beta, 0, t50_mg, beta = 1.5, k = 0.01, m = 1, dose = 100) #> 50 with absolute error < 0.0042"},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos_scintigraphy.html","id":null,"dir":"Reference","previous_headings":"","what":"Half-emptying time t50 from Maes/Ghoos fit with scintigraphic correction — t50_maes_ghoos_scintigraphy","title":"Half-emptying time t50 from Maes/Ghoos fit with scintigraphic correction — t50_maes_ghoos_scintigraphy","text":"Half-emptying time t50 minutes beta exponential function fit, linear rather arbitrary correction  scintigraphic values. given comparison published data ; little justification use , even closer real gastric emptying times determined MRI scintigraphy. Ghoos YF, Maes BD, Geypens BJ, Mys G, Hiele MI, Rutgeerts PJ, Vantrappen G.  Measurement gastric emptying rate solids means carbon-labeled  octanoic acid breath test. Gastroenterology. 1993;104:1640-1647.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos_scintigraphy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half-emptying time t50 from Maes/Ghoos fit with scintigraphic correction — t50_maes_ghoos_scintigraphy","text":"","code":"t50_maes_ghoos_scintigraphy(cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos_scintigraphy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Half-emptying time t50 from Maes/Ghoos fit with scintigraphic correction — t50_maes_ghoos_scintigraphy","text":"cf named vector coefficients; k beta required","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/t50_maes_ghoos_scintigraphy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Half-emptying time t50 from Maes/Ghoos fit with scintigraphic correction — t50_maes_ghoos_scintigraphy","text":"Time value 1/2 maximum, .e. t50 minutes.","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/tidy.breathtestfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","title":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","text":"Broom-method tidy streamline results class  breathttestfit  generated  nls_fit nlme_fit. Returns  fit  coefficients half-emptying time t50 Maes/Ghoos method;  additional parameters extracted coef.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tidy.breathtestfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","text":"","code":"# S3 method for breathtestfit tidy(x, ...)"},{"path":"https://dmenne.github.io/breathtestcore/reference/tidy.breathtestfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","text":"x Object class breathttestfit ... parameters passed methods","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tidy.breathtestfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","text":"tibble/data frame columns patient_id Patient Id (character) group Treatment patient group (character) m Fraction metabolized k Time constant (1/minutes) beta -called lag parameters, dimension t50 Emptying half time minutes calculated following Maes/Ghoos","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/tidy.breathtestfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broom-style tidying methods for breathtestfit — tidy.breathtestfit","text":"","code":"library(broom) # Generate simulated data data = cleanup_data(simulate_breathtest_data()$data) # Fit with the population method fit = nlme_fit(data) # Output coefficients tidy(fit) #> # A tibble: 10 × 6 #>    patient_id group     m       k  beta   t50 #>    <chr>      <chr> <dbl>   <dbl> <dbl> <dbl> #>  1 rec_01     A      29.1 0.0138   1.60  76.0 #>  2 rec_02     A      23.5 0.00982  2.20 133.  #>  3 rec_03     A      36.7 0.00732  1.47 134.  #>  4 rec_04     A      38.3 0.00728  1.51 137.  #>  5 rec_05     A      29.2 0.0125   2.63 117.  #>  6 rec_06     A      65.1 0.00570  1.98 214.  #>  7 rec_07     A      41.5 0.00822  2.29 163.  #>  8 rec_08     A      40.2 0.0110   2.10 115.  #>  9 rec_09     A      42.8 0.0120   2.31 113.  #> 10 rec_10     A      75.9 0.00648  1.54 156.  # All coefficients in the long form coef(fit) #> # A tibble: 80 × 5 #>    patient_id group parameter method                      value #>    <chr>      <chr> <chr>     <chr>                       <dbl> #>  1 rec_01     A     m         exp_beta                 29.1     #>  2 rec_01     A     k         exp_beta                  0.0138  #>  3 rec_01     A     beta      exp_beta                  1.60    #>  4 rec_01     A     t50       bluck_coward             12.8     #>  5 rec_01     A     t50       maes_ghoos               76.0     #>  6 rec_01     A     t50       maes_ghoos_scintigraphy   8.89    #>  7 rec_01     A     tlag      bluck_coward            -16.0     #>  8 rec_01     A     tlag      maes_ghoos               34.3     #>  9 rec_02     A     m         exp_beta                 23.5     #> 10 rec_02     A     k         exp_beta                  0.00982 #> # … with 70 more rows"},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_bluck_coward.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag phase for Bluck-Coward self-correcting fit — tlag_bluck_coward","title":"Lag phase for Bluck-Coward self-correcting fit — tlag_bluck_coward","text":"parameter probably useful, can negative","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_bluck_coward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag phase for Bluck-Coward self-correcting fit — tlag_bluck_coward","text":"","code":"tlag_bluck_coward(cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_bluck_coward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag phase for Bluck-Coward self-correcting fit — tlag_bluck_coward","text":"cf named vector coefficients; k beta required. Note package,  k measured 1/min (e.g. 0.01/min), literature often quoted 1/h (e.g. 0.6/h).","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_bluck_coward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag phase for Bluck-Coward self-correcting fit — tlag_bluck_coward","text":"Lag phase minutes (time t maximum rate change g(t) occurs)","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_maes_ghoos.html","id":null,"dir":"Reference","previous_headings":"","what":"So-called lag time from Maes/Ghoos fit — tlag_maes_ghoos","title":"So-called lag time from Maes/Ghoos fit — tlag_maes_ghoos","text":"Computes tlag uncorrected fit beta  exponential function. name tlag misnomer; simply  maximum PDR curve, papers Bluck et al. renamed t_max. Maes B D, Ghoos Y F, Rutgeerts P J, Hiele M , Geypens B Vantrappen G 1994  Dig. Dis. Sci. 39 S104-6.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_maes_ghoos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"So-called lag time from Maes/Ghoos fit — tlag_maes_ghoos","text":"","code":"tlag_maes_ghoos(cf)"},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_maes_ghoos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"So-called lag time from Maes/Ghoos fit — tlag_maes_ghoos","text":"cf named vector coefficients; k beta required k measured 1/min (e.g. 0.01/min).","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/tlag_maes_ghoos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"So-called lag time from Maes/Ghoos fit — tlag_maes_ghoos","text":"Lag time defined Maes/Ghoos fit","code":""},{"path":[]},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c.html","id":null,"dir":"Reference","previous_headings":"","what":"Zurich sample set of 13C breath test data — usz_13c","title":"Zurich sample set of 13C breath test data — usz_13c","text":"13C time series PDR data normals random patients division Gastroenterology Hepatology, University Hospital Zurich. breath samples normals collected bags analyzed IRIS/Wagner infrared spectroscopy. Patient samples recorded continuous monitoring system BreathID. patient_id Patient identifier, starting norm normals   (healthy volunteers)  pat patients. Note normals   two records subject, combination patient_id    group unique identifier time series record. group liquid_normal normals liquid meal,   solid_normal normals solid meal, patient patients   University Hospital Zurich. minute Time minutes pdr PDR computed breathtest device dob via function dob_to_pdr","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zurich sample set of 13C breath test data — usz_13c","text":"","code":"data(usz_13c)"},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Zurich sample set of 13C breath test data — usz_13c","text":"data frame 15574 rows 4 variables","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zurich sample set of 13C breath test data — usz_13c","text":"","code":"data(usz_13c) if (FALSE) { str(usz_13c) # Plot all records; this needs some time pdf(file.path(tempdir(), \"usz_13c.pdf\"), height= 30) # null_fit makes data plotable without fitting a model plot(null_fit(usz_13c)) dev.off() } # Plot a subset suppressPackageStartupMessages(library(dplyr)) usz_part =  usz_13c  %>%    filter(patient_id %in% c(\"norm_001\",\"norm_002\", \"pat_001\", \"pat_002\")) plot(null_fit(usz_part))"},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_a.html","id":null,"dir":"Reference","previous_headings":"","what":"Exotic 13C breath test data — usz_13c_a","title":"Exotic 13C breath test data — usz_13c_a","text":"13C time series PDR data three different groups randomized (= -crossover) design. unpublished data Gastroenterology Hepatology, University Hospital Zurich. Data formatted described usz_13c. time series present challenge algorithms.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exotic 13C breath test data — usz_13c_a","text":"","code":"data(usz_13c_a)"},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_a.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exotic 13C breath test data — usz_13c_a","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) data(usz_13c_a) d = usz_13c_a %>%    cleanup_data() %>% # recommended to test for validity   nlme_fit() plot(d)  # }"},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_d.html","id":null,"dir":"Reference","previous_headings":"","what":"13C breath test data with MRI emptying for comparison — usz_13c_d","title":"13C breath test data with MRI emptying for comparison — usz_13c_d","text":"13C time series PDR data normals three different meals  cross-design division  Gastroenterology Hepatology, University Hospital Zurich. See Kuyumcu et al., Gastric secretion affect.... Data formatted described usz_13c. addition, half emptying times MRI measurements attached data attribute mri_t50. example shows analyze data present half emptying times MRI 13C diagrams.","code":""},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"13C breath test data with MRI emptying for comparison — usz_13c_d","text":"","code":"data(usz_13c_d)"},{"path":"https://dmenne.github.io/breathtestcore/reference/usz_13c_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"13C breath test data with MRI emptying for comparison — usz_13c_d","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) data(usz_13c_d) mri_t50 = attr(usz_13c_d, \"mri_t50\") d = usz_13c_d %>%    cleanup_data() %>% # recommended to test for validity   nlme_fit() plot(d) +   geom_vline(data = mri_t50, aes(xintercept = t50), linetype = 2)   # Maes-Ghoos t50 dd = mri_t50 %>%    inner_join(     coef(d) %>% filter(parameter==\"t50\", method == \"maes_ghoos\"),     by = c(\"patient_id\", \"group\")) %>%    mutate(     t50_maes_ghoos = value  )  ggplot(dd, aes(x=t50, y = t50_maes_ghoos, color = group)) +     geom_point() +   facet_wrap(~group) +   geom_abline(slope = 1, intercept = 0) +   xlim(45,205) +   ylim(45,205)  #> Warning: Removed 1 rows containing missing values (geom_point).   # Bluck-Coward t50 dd = mri_t50 %>%    inner_join(     coef(d) %>% filter(parameter==\"t50\", method == \"bluck_coward\"),     by = c(\"patient_id\", \"group\")) %>%    mutate(     t50_bluck_coward = value  )  ggplot(dd, aes(x=t50, y = t50_bluck_coward, color = group)) +     geom_point() +   facet_wrap(~group) +   geom_abline(slope = 1, intercept = 0) +   xlim(0,205) +   ylim(0,205)   # }"}]
